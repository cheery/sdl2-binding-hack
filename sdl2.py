# autogenerated by mk_wrapper.py - edit the mk_wrapper.py instead.
from ctypes import CDLL, c_char, c_ubyte, c_int, c_uint, c_long, c_ulong, c_short, c_ushort, c_void_p, c_char_p, c_float, c_double, POINTER, CFUNCTYPE, Structure, Union

lib = CDLL('libSDL2-2.0.so.0')

def DEFINE_PIXELFORMAT(type, order, layout, bits, bytes):
    return (
        (1 << 28) | ((type) << 24) |
        ((order) << 20) | ((layout) << 16) |
        ((bits) << 8) | ((bytes) << 0)
    )

SCANCODE_MASK = 1 << 30
def SCANCODE_TO_KEYCODE(X):
    return (X | SCANCODE_MASK)
#SDL_TriggerBreakpoint = () __asm__ __volatile__ ( "int $3\n\t" )
#SDL_assert = (condition) enabled_assert(condition)
#SDL_assert_release = (condition) enabled_assert(condition)
#SDL_assert_paranoid = (condition) disabled_assert(condition)
#SDL_CompilerBarrier = ()   __asm__ __volatile__ ("" : : : "memory")
#SDL_AtomicSet = (a, v)     __sync_lock_test_and_set(&(a)->value, v)
#SDL_AtomicAdd = (a, v)     __sync_fetch_and_add(&(a)->value, v)
#SDL_AtomicSetPtr = (a, v)  __sync_lock_test_and_set(a, v)
#SDL_AtomicCAS = (a, oldval, newval) __sync_bool_compare_and_swap(&(a)->value, oldval, newval)
#SDL_AtomicCASPtr = (a, oldval, newval) __sync_bool_compare_and_swap(a, oldval, newval)
#SDL_AtomicCAS
#SDL_AtomicSet
#SDL_CompilerBarrier
#SDL_AtomicAdd
#SDL_AtomicIncRef = (a)    AtomicAdd(a, 1)
#SDL_AtomicDecRef = (a)    (AtomicAdd(a, -1) == 1)
#SDL_AtomicCASPtr
#SDL_AtomicSetPtr
#SDL_CompilerBarrier
#SDL_SwapLE16 = (X) (X)
#SDL_SwapLE32 = (X) (X)
#SDL_SwapLE64 = (X) (X)
#SDL_SwapFloatLE = (X)  (X)
#SDL_SwapBE16 = (X) Swap16(X)
#SDL_SwapBE32 = (X) Swap32(X)
#SDL_SwapBE64 = (X) Swap64(X)
#SDL_SwapFloatBE = (X)  SwapFloat(X)
#SDL_RWseek = (ctx, offset, whence) (ctx)->seek(ctx, offset, whence)
#SDL_RWtell = (ctx)         (ctx)->seek(ctx, 0, RW_SEEK_CUR)
#SDL_RWread = (ctx, ptr, size, n)   (ctx)->read(ctx, ptr, size, n)
#SDL_RWwrite = (ctx, ptr, size, n)  (ctx)->write(ctx, ptr, size, n)
#SDL_RWclose = (ctx)        (ctx)->close(ctx)
#SDL_LoadWAV = (file, spec, audio_buf, audio_len) \
#    LoadWAV_RW(RWFromFile(file, "rb"),1, spec,audio_buf,audio_len)
#SDL_MUSTLOCK = (S) (((S)->flags & RLEACCEL) != 0)
#SDL_LoadBMP = (file)   LoadBMP_RW(RWFromFile(file, "rb"), 1)
#SDL_SaveBMP = (surface, file) \
#        SaveBMP_RW(surface, RWFromFile(file, "wb"), 1)
#SDL_BlitSurface = UpperBlit
#SDL_BlitScaled = UpperBlitScaled
#SDL_QuitRequested = () \
#        (PumpEvents(), (PeepEvents(NULL,0,PEEKEVENT,QUIT,QUIT) > 0))
#SDL_VERSION = (x)                          \
#{                                   \
#    (x)->major = MAJOR_VERSION;                 \
#    (x)->minor = MINOR_VERSION;                 \
#    (x)->patch = PATCHLEVEL;                    \
#}
#SDL_VERSIONNUM = (X, Y, Z)                     \
#    ((X)*1000 + (Y)*100 + (Z))
#SDL_COMPILEDVERSION = \
#    VERSIONNUM(MAJOR_VERSION, MINOR_VERSION, PATCHLEVEL)
#SDL_VERSION_ATLEAST = (X, Y, Z) \
#    (COMPILEDVERSION >= VERSIONNUM(X, Y, Z))

getPlatform = lib.SDL_GetPlatform
getPlatform.restype  = c_char_p
getPlatform.argtypes = []
FP_NAN = 0
FP_INFINITE = 1
FP_ZERO = 2
FP_SUBNORMAL = 3
FP_NORMAL = 4
FALSE = 0
TRUE = 1
DUMMY_ENUM_VALUE = 0

setMainReady = lib.SDL_SetMainReady
setMainReady.restype  = None
setMainReady.argtypes = []
ASSERTION_RETRY = 0
ASSERTION_BREAK = 1
ASSERTION_ABORT = 2
ASSERTION_IGNORE = 3
ASSERTION_ALWAYS_IGNORE = 4

class assert_data(Structure):
    _fields_ = [
        ('always_ignore', c_int),
        ('trigger_count', c_uint),
        ('condition', c_char_p),
        ('filename', c_char_p),
        ('linenum', c_int),
        ('function', c_char_p),
        ('next', c_void_p)
    ]

AssertionHandler = CFUNCTYPE(c_int, POINTER(assert_data), c_void_p)

setAssertionHandler = lib.SDL_SetAssertionHandler
setAssertionHandler.restype  = None
setAssertionHandler.argtypes = [AssertionHandler, c_void_p]

getAssertionReport = lib.SDL_GetAssertionReport
getAssertionReport.restype  = POINTER(assert_data)
getAssertionReport.argtypes = []

resetAssertionReport = lib.SDL_ResetAssertionReport
resetAssertionReport.restype  = None
resetAssertionReport.argtypes = []

bool = c_int

SpinLock = c_int

atomicTryLock = lib.SDL_AtomicTryLock
atomicTryLock.restype  = bool
atomicTryLock.argtypes = [POINTER(SpinLock)]

atomicLock = lib.SDL_AtomicLock
atomicLock.restype  = None
atomicLock.argtypes = [POINTER(SpinLock)]

atomicUnlock = lib.SDL_AtomicUnlock
atomicUnlock.restype  = None
atomicUnlock.argtypes = [POINTER(SpinLock)]

setError = lib.SDL_SetError
setError.restype  = c_int
setError.argtypes = [c_char_p]

getError = lib.SDL_GetError
getError.restype  = c_char_p
getError.argtypes = []

clearError = lib.SDL_ClearError
clearError.restype  = None
clearError.argtypes = []
ENOMEM = 0
EFREAD = 1
EFWRITE = 2
EFSEEK = 3
UNSUPPORTED = 4
LASTERROR = 5

class mutex(Structure):
    _fields_ = [
        
    ]

createMutex = lib.SDL_CreateMutex
createMutex.restype  = POINTER(mutex)
createMutex.argtypes = []

lockMutex = lib.SDL_LockMutex
lockMutex.restype  = c_int
lockMutex.argtypes = [POINTER(mutex)]

TryLockMutex = lib.SDL_TryLockMutex
TryLockMutex.restype  = c_int
TryLockMutex.argtypes = [POINTER(mutex)]

unlockMutex = lib.SDL_UnlockMutex
unlockMutex.restype  = c_int
unlockMutex.argtypes = [POINTER(mutex)]

destroyMutex = lib.SDL_DestroyMutex
destroyMutex.restype  = None
destroyMutex.argtypes = [POINTER(mutex)]

class sem(Structure):
    _fields_ = [
        
    ]

Uint32 = c_uint

createSemaphore = lib.SDL_CreateSemaphore
createSemaphore.restype  = POINTER(sem)
createSemaphore.argtypes = [Uint32]

destroySemaphore = lib.SDL_DestroySemaphore
destroySemaphore.restype  = None
destroySemaphore.argtypes = [POINTER(sem)]

semWait = lib.SDL_SemWait
semWait.restype  = c_int
semWait.argtypes = [POINTER(sem)]

semTryWait = lib.SDL_SemTryWait
semTryWait.restype  = c_int
semTryWait.argtypes = [POINTER(sem)]

semWaitTimeout = lib.SDL_SemWaitTimeout
semWaitTimeout.restype  = c_int
semWaitTimeout.argtypes = [POINTER(sem), Uint32]

semPost = lib.SDL_SemPost
semPost.restype  = c_int
semPost.argtypes = [POINTER(sem)]

semValue = lib.SDL_SemValue
semValue.restype  = Uint32
semValue.argtypes = [POINTER(sem)]

class cond(Structure):
    _fields_ = [
        
    ]

createCond = lib.SDL_CreateCond
createCond.restype  = POINTER(cond)
createCond.argtypes = []

destroyCond = lib.SDL_DestroyCond
destroyCond.restype  = None
destroyCond.argtypes = [POINTER(cond)]

condSignal = lib.SDL_CondSignal
condSignal.restype  = c_int
condSignal.argtypes = [POINTER(cond)]

condBroadcast = lib.SDL_CondBroadcast
condBroadcast.restype  = c_int
condBroadcast.argtypes = [POINTER(cond)]

condWait = lib.SDL_CondWait
condWait.restype  = c_int
condWait.argtypes = [POINTER(cond), POINTER(mutex)]

condWaitTimeout = lib.SDL_CondWaitTimeout
condWaitTimeout.restype  = c_int
condWaitTimeout.argtypes = [POINTER(cond), POINTER(mutex), Uint32]
THREAD_PRIORITY_LOW = 0
THREAD_PRIORITY_NORMAL = 1
THREAD_PRIORITY_HIGH = 2

class Thread(Structure):
    _fields_ = [
        
    ]

ThreadFunction = CFUNCTYPE(c_int, c_void_p)

createThread = lib.SDL_CreateThread
createThread.restype  = POINTER(Thread)
createThread.argtypes = [ThreadFunction, c_char_p, c_void_p]

getThreadName = lib.SDL_GetThreadName
getThreadName.restype  = c_char_p
getThreadName.argtypes = [POINTER(Thread)]

threadID = c_ulong

ThreadID = lib.SDL_ThreadID
ThreadID.restype  = threadID
ThreadID.argtypes = []

getThreadID = lib.SDL_GetThreadID
getThreadID.restype  = threadID
getThreadID.argtypes = [POINTER(Thread)]

ThreadPriority = c_int

setThreadPriority = lib.SDL_SetThreadPriority
setThreadPriority.restype  = c_int
setThreadPriority.argtypes = [ThreadPriority]

waitThread = lib.SDL_WaitThread
waitThread.restype  = None
waitThread.argtypes = [POINTER(Thread), POINTER(c_int)]

TLSID = c_uint

TLSCreate = lib.SDL_TLSCreate
TLSCreate.restype  = TLSID
TLSCreate.argtypes = []

TLSGet = lib.SDL_TLSGet
TLSGet.restype  = c_void_p
TLSGet.argtypes = [TLSID]

TLSSet = lib.SDL_TLSSet
TLSSet.restype  = c_int
TLSSet.argtypes = [TLSID, c_void_p, c_void_p]

class RWops_hidden_stdio(Structure):
    _fields_ = [
        ('autoclose', bool),
        ('fp', c_void_p)
    ]

Uint8 = c_ubyte

class RWops_hidden_mem(Structure):
    _fields_ = [
        ('base', POINTER(Uint8)),
        ('here', POINTER(Uint8)),
        ('stop', POINTER(Uint8))
    ]

class RWops_hidden_unknown(Structure):
    _fields_ = [
        ('data1', c_void_p),
        ('data2', c_void_p)
    ]

class RWops_hidden(Union):
    _fields_ = [
        ('stdio', RWops_hidden_stdio),
        ('mem', RWops_hidden_mem),
        ('unknown', RWops_hidden_unknown)
    ]

class RWops(Structure):
    _fields_ = [
        ('size', c_void_p),
        ('seek', c_void_p),
        ('read', c_void_p),
        ('write', c_void_p),
        ('close', c_void_p),
        ('type', Uint32),
        ('hidden', RWops_hidden)
    ]

RWFromFile = lib.SDL_RWFromFile
RWFromFile.restype  = POINTER(RWops)
RWFromFile.argtypes = [c_char_p, c_char_p]

RWFromFP = lib.SDL_RWFromFP
RWFromFP.restype  = POINTER(RWops)
RWFromFP.argtypes = [c_void_p, bool]

RWFromMem = lib.SDL_RWFromMem
RWFromMem.restype  = POINTER(RWops)
RWFromMem.argtypes = [c_void_p, c_int]

RWFromConstMem = lib.SDL_RWFromConstMem
RWFromConstMem.restype  = POINTER(RWops)
RWFromConstMem.argtypes = [c_void_p, c_int]

allocRW = lib.SDL_AllocRW
allocRW.restype  = POINTER(RWops)
allocRW.argtypes = []

freeRW = lib.SDL_FreeRW
freeRW.restype  = None
freeRW.argtypes = [POINTER(RWops)]

Uint16 = c_ushort

readLE16 = lib.SDL_ReadLE16
readLE16.restype  = Uint16
readLE16.argtypes = [POINTER(RWops)]

readBE16 = lib.SDL_ReadBE16
readBE16.restype  = Uint16
readBE16.argtypes = [POINTER(RWops)]

readLE32 = lib.SDL_ReadLE32
readLE32.restype  = Uint32
readLE32.argtypes = [POINTER(RWops)]

readBE32 = lib.SDL_ReadBE32
readBE32.restype  = Uint32
readBE32.argtypes = [POINTER(RWops)]

Uint64 = c_ulong

readLE64 = lib.SDL_ReadLE64
readLE64.restype  = Uint64
readLE64.argtypes = [POINTER(RWops)]

readBE64 = lib.SDL_ReadBE64
readBE64.restype  = Uint64
readBE64.argtypes = [POINTER(RWops)]

size_t = c_ulong

writeLE16 = lib.SDL_WriteLE16
writeLE16.restype  = size_t
writeLE16.argtypes = [POINTER(RWops), Uint16]

writeBE16 = lib.SDL_WriteBE16
writeBE16.restype  = size_t
writeBE16.argtypes = [POINTER(RWops), Uint16]

writeLE32 = lib.SDL_WriteLE32
writeLE32.restype  = size_t
writeLE32.argtypes = [POINTER(RWops), Uint32]

writeBE32 = lib.SDL_WriteBE32
writeBE32.restype  = size_t
writeBE32.argtypes = [POINTER(RWops), Uint32]

writeLE64 = lib.SDL_WriteLE64
writeLE64.restype  = size_t
writeLE64.argtypes = [POINTER(RWops), Uint64]

writeBE64 = lib.SDL_WriteBE64
writeBE64.restype  = size_t
writeBE64.argtypes = [POINTER(RWops), Uint64]

getNumAudioDrivers = lib.SDL_GetNumAudioDrivers
getNumAudioDrivers.restype  = c_int
getNumAudioDrivers.argtypes = []

getAudioDriver = lib.SDL_GetAudioDriver
getAudioDriver.restype  = c_char_p
getAudioDriver.argtypes = [c_int]

audioInit = lib.SDL_AudioInit
audioInit.restype  = c_int
audioInit.argtypes = [c_char_p]

audioQuit = lib.SDL_AudioQuit
audioQuit.restype  = None
audioQuit.argtypes = []

getCurrentAudioDriver = lib.SDL_GetCurrentAudioDriver
getCurrentAudioDriver.restype  = c_char_p
getCurrentAudioDriver.argtypes = []

AudioFormat = c_ushort

AudioCallback = CFUNCTYPE(None, c_void_p, POINTER(c_ubyte), c_int)

class AudioSpec(Structure):
    _fields_ = [
        ('freq', c_int),
        ('format', AudioFormat),
        ('channels', Uint8),
        ('silence', Uint8),
        ('samples', Uint16),
        ('padding', Uint16),
        ('size', Uint32),
        ('callback', AudioCallback),
        ('userdata', c_void_p)
    ]

openAudio = lib.SDL_OpenAudio
openAudio.restype  = c_int
openAudio.argtypes = [POINTER(AudioSpec), POINTER(AudioSpec)]

getNumAudioDevices = lib.SDL_GetNumAudioDevices
getNumAudioDevices.restype  = c_int
getNumAudioDevices.argtypes = [c_int]

getAudioDeviceName = lib.SDL_GetAudioDeviceName
getAudioDeviceName.restype  = c_char_p
getAudioDeviceName.argtypes = [c_int, c_int]

AudioDeviceID = c_uint

openAudioDevice = lib.SDL_OpenAudioDevice
openAudioDevice.restype  = AudioDeviceID
openAudioDevice.argtypes = [c_char_p, c_int, POINTER(AudioSpec), POINTER(AudioSpec), c_int]
AUDIO_STOPPED = 0
AUDIO_PLAYING = 1
AUDIO_PAUSED = 2

AudioStatus = c_int

getAudioStatus = lib.SDL_GetAudioStatus
getAudioStatus.restype  = AudioStatus
getAudioStatus.argtypes = []

getAudioDeviceStatus = lib.SDL_GetAudioDeviceStatus
getAudioDeviceStatus.restype  = AudioStatus
getAudioDeviceStatus.argtypes = [AudioDeviceID]

pauseAudio = lib.SDL_PauseAudio
pauseAudio.restype  = None
pauseAudio.argtypes = [c_int]

pauseAudioDevice = lib.SDL_PauseAudioDevice
pauseAudioDevice.restype  = None
pauseAudioDevice.argtypes = [AudioDeviceID, c_int]

loadWAV_RW = lib.SDL_LoadWAV_RW
loadWAV_RW.restype  = POINTER(AudioSpec)
loadWAV_RW.argtypes = [POINTER(RWops), c_int, POINTER(AudioSpec), POINTER(POINTER(Uint8)), POINTER(Uint32)]

freeWAV = lib.SDL_FreeWAV
freeWAV.restype  = None
freeWAV.argtypes = [POINTER(Uint8)]
AudioCVT = None

AudioFilter = CFUNCTYPE(None, POINTER(AudioCVT), c_ushort)

class AudioCVT(Structure):
    _fields_ = [
        ('needed', c_int),
        ('src_format', AudioFormat),
        ('dst_format', AudioFormat),
        ('rate_incr', c_double),
        ('buf', POINTER(Uint8)),
        ('len', c_int),
        ('len_cvt', c_int),
        ('len_mult', c_int),
        ('len_ratio', c_double),
        ('filters', (AudioFilter*10)),
        ('filter_index', c_int)
    ]

buildAudioCVT = lib.SDL_BuildAudioCVT
buildAudioCVT.restype  = c_int
buildAudioCVT.argtypes = [POINTER(AudioCVT), AudioFormat, Uint8, c_int, AudioFormat, Uint8, c_int]

convertAudio = lib.SDL_ConvertAudio
convertAudio.restype  = c_int
convertAudio.argtypes = [POINTER(AudioCVT)]

mixAudio = lib.SDL_MixAudio
mixAudio.restype  = None
mixAudio.argtypes = [POINTER(Uint8), POINTER(Uint8), Uint32, c_int]

mixAudioFormat = lib.SDL_MixAudioFormat
mixAudioFormat.restype  = None
mixAudioFormat.argtypes = [POINTER(Uint8), POINTER(Uint8), AudioFormat, Uint32, c_int]

lockAudio = lib.SDL_LockAudio
lockAudio.restype  = None
lockAudio.argtypes = []

lockAudioDevice = lib.SDL_LockAudioDevice
lockAudioDevice.restype  = None
lockAudioDevice.argtypes = [AudioDeviceID]

unlockAudio = lib.SDL_UnlockAudio
unlockAudio.restype  = None
unlockAudio.argtypes = []

unlockAudioDevice = lib.SDL_UnlockAudioDevice
unlockAudioDevice.restype  = None
unlockAudioDevice.argtypes = [AudioDeviceID]

closeAudio = lib.SDL_CloseAudio
closeAudio.restype  = None
closeAudio.argtypes = []

closeAudioDevice = lib.SDL_CloseAudioDevice
closeAudioDevice.restype  = None
closeAudioDevice.argtypes = [AudioDeviceID]

setClipboardText = lib.SDL_SetClipboardText
setClipboardText.restype  = c_int
setClipboardText.argtypes = [c_char_p]

getClipboardText = lib.SDL_GetClipboardText
getClipboardText.restype  = c_char_p
getClipboardText.argtypes = []

hasClipboardText = lib.SDL_HasClipboardText
hasClipboardText.restype  = bool
hasClipboardText.argtypes = []

getCPUCount = lib.SDL_GetCPUCount
getCPUCount.restype  = c_int
getCPUCount.argtypes = []

getCPUCacheLineSize = lib.SDL_GetCPUCacheLineSize
getCPUCacheLineSize.restype  = c_int
getCPUCacheLineSize.argtypes = []

hasRDTSC = lib.SDL_HasRDTSC
hasRDTSC.restype  = bool
hasRDTSC.argtypes = []

hasAltiVec = lib.SDL_HasAltiVec
hasAltiVec.restype  = bool
hasAltiVec.argtypes = []

hasMMX = lib.SDL_HasMMX
hasMMX.restype  = bool
hasMMX.argtypes = []

has3DNow = lib.SDL_Has3DNow
has3DNow.restype  = bool
has3DNow.argtypes = []

hasSSE = lib.SDL_HasSSE
hasSSE.restype  = bool
hasSSE.argtypes = []

hasSSE2 = lib.SDL_HasSSE2
hasSSE2.restype  = bool
hasSSE2.argtypes = []

hasSSE3 = lib.SDL_HasSSE3
hasSSE3.restype  = bool
hasSSE3.argtypes = []

hasSSE41 = lib.SDL_HasSSE41
hasSSE41.restype  = bool
hasSSE41.argtypes = []

hasSSE42 = lib.SDL_HasSSE42
hasSSE42.restype  = bool
hasSSE42.argtypes = []
PIXELTYPE_UNKNOWN = 0
PIXELTYPE_INDEX1 = 1
PIXELTYPE_INDEX4 = 2
PIXELTYPE_INDEX8 = 3
PIXELTYPE_PACKED8 = 4
PIXELTYPE_PACKED16 = 5
PIXELTYPE_PACKED32 = 6
PIXELTYPE_ARRAYU8 = 7
PIXELTYPE_ARRAYU16 = 8
PIXELTYPE_ARRAYU32 = 9
PIXELTYPE_ARRAYF16 = 10
PIXELTYPE_ARRAYF32 = 11
BITMAPORDER_NONE = 0
BITMAPORDER_4321 = 1
BITMAPORDER_1234 = 2
PACKEDORDER_NONE = 0
PACKEDORDER_XRGB = 1
PACKEDORDER_RGBX = 2
PACKEDORDER_ARGB = 3
PACKEDORDER_RGBA = 4
PACKEDORDER_XBGR = 5
PACKEDORDER_BGRX = 6
PACKEDORDER_ABGR = 7
PACKEDORDER_BGRA = 8
ARRAYORDER_NONE = 0
ARRAYORDER_RGB = 1
ARRAYORDER_RGBA = 2
ARRAYORDER_ARGB = 3
ARRAYORDER_BGR = 4
ARRAYORDER_BGRA = 5
ARRAYORDER_ABGR = 6
PACKEDLAYOUT_NONE = 0
PACKEDLAYOUT_332 = 1
PACKEDLAYOUT_4444 = 2
PACKEDLAYOUT_1555 = 3
PACKEDLAYOUT_5551 = 4
PACKEDLAYOUT_565 = 5
PACKEDLAYOUT_8888 = 6
PACKEDLAYOUT_2101010 = 7
PACKEDLAYOUT_1010102 = 8
PIXELFORMAT_UNKNOWN = 0
PIXELFORMAT_INDEX1LSB = DEFINE_PIXELFORMAT(PIXELTYPE_INDEX1, BITMAPORDER_4321, 0,
                               1, 0)
PIXELFORMAT_INDEX1MSB = DEFINE_PIXELFORMAT(PIXELTYPE_INDEX1, BITMAPORDER_1234, 0,
                               1, 0)
PIXELFORMAT_INDEX4LSB = DEFINE_PIXELFORMAT(PIXELTYPE_INDEX4, BITMAPORDER_4321, 0,
                               4, 0)
PIXELFORMAT_INDEX4MSB = DEFINE_PIXELFORMAT(PIXELTYPE_INDEX4, BITMAPORDER_1234, 0,
                               4, 0)
PIXELFORMAT_INDEX8 = DEFINE_PIXELFORMAT(PIXELTYPE_INDEX8, 0, 0, 8, 1)
PIXELFORMAT_RGB332 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED8, PACKEDORDER_XRGB,
                               PACKEDLAYOUT_332, 8, 1)
PIXELFORMAT_RGB444 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_XRGB,
                               PACKEDLAYOUT_4444, 12, 2)
PIXELFORMAT_RGB555 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_XRGB,
                               PACKEDLAYOUT_1555, 15, 2)
PIXELFORMAT_BGR555 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_XBGR,
                               PACKEDLAYOUT_1555, 15, 2)
PIXELFORMAT_ARGB4444 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_ARGB,
                               PACKEDLAYOUT_4444, 16, 2)
PIXELFORMAT_RGBA4444 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_RGBA,
                               PACKEDLAYOUT_4444, 16, 2)
PIXELFORMAT_ABGR4444 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_ABGR,
                               PACKEDLAYOUT_4444, 16, 2)
PIXELFORMAT_BGRA4444 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_BGRA,
                               PACKEDLAYOUT_4444, 16, 2)
PIXELFORMAT_ARGB1555 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_ARGB,
                               PACKEDLAYOUT_1555, 16, 2)
PIXELFORMAT_RGBA5551 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_RGBA,
                               PACKEDLAYOUT_5551, 16, 2)
PIXELFORMAT_ABGR1555 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_ABGR,
                               PACKEDLAYOUT_1555, 16, 2)
PIXELFORMAT_BGRA5551 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_BGRA,
                               PACKEDLAYOUT_5551, 16, 2)
PIXELFORMAT_RGB565 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_XRGB,
                               PACKEDLAYOUT_565, 16, 2)
PIXELFORMAT_BGR565 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED16, PACKEDORDER_XBGR,
                               PACKEDLAYOUT_565, 16, 2)
PIXELFORMAT_RGB24 = DEFINE_PIXELFORMAT(PIXELTYPE_ARRAYU8, ARRAYORDER_RGB, 0,
                               24, 3)
PIXELFORMAT_BGR24 = DEFINE_PIXELFORMAT(PIXELTYPE_ARRAYU8, ARRAYORDER_BGR, 0,
                               24, 3)
PIXELFORMAT_RGB888 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_XRGB,
                               PACKEDLAYOUT_8888, 24, 4)
PIXELFORMAT_RGBX8888 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_RGBX,
                               PACKEDLAYOUT_8888, 24, 4)
PIXELFORMAT_BGR888 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_XBGR,
                               PACKEDLAYOUT_8888, 24, 4)
PIXELFORMAT_BGRX8888 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_BGRX,
                               PACKEDLAYOUT_8888, 24, 4)
PIXELFORMAT_ARGB8888 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ARGB,
                               PACKEDLAYOUT_8888, 32, 4)
PIXELFORMAT_RGBA8888 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_RGBA,
                               PACKEDLAYOUT_8888, 32, 4)
PIXELFORMAT_ABGR8888 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ABGR,
                               PACKEDLAYOUT_8888, 32, 4)
PIXELFORMAT_BGRA8888 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_BGRA,
                               PACKEDLAYOUT_8888, 32, 4)
PIXELFORMAT_ARGB2101010 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ARGB,
                               PACKEDLAYOUT_2101010, 32, 4)
PIXELFORMAT_YV12 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ARGB,
                               PACKEDLAYOUT_2101010, 32, 4)
PIXELFORMAT_IYUV = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ARGB,
                               PACKEDLAYOUT_2101010, 32, 4)
PIXELFORMAT_YUY2 = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ARGB,
                               PACKEDLAYOUT_2101010, 32, 4)
PIXELFORMAT_UYVY = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ARGB,
                               PACKEDLAYOUT_2101010, 32, 4)
PIXELFORMAT_YVYU = DEFINE_PIXELFORMAT(PIXELTYPE_PACKED32, PACKEDORDER_ARGB,
                               PACKEDLAYOUT_2101010, 32, 4)

getPixelFormatName = lib.SDL_GetPixelFormatName
getPixelFormatName.restype  = c_char_p
getPixelFormatName.argtypes = [Uint32]

pixelFormatEnumToMasks = lib.SDL_PixelFormatEnumToMasks
pixelFormatEnumToMasks.restype  = bool
pixelFormatEnumToMasks.argtypes = [Uint32, POINTER(c_int), POINTER(Uint32), POINTER(Uint32), POINTER(Uint32), POINTER(Uint32)]

masksToPixelFormatEnum = lib.SDL_MasksToPixelFormatEnum
masksToPixelFormatEnum.restype  = Uint32
masksToPixelFormatEnum.argtypes = [c_int, Uint32, Uint32, Uint32, Uint32]

class Color(Structure):
    _fields_ = [
        ('r', Uint8),
        ('g', Uint8),
        ('b', Uint8),
        ('a', Uint8)
    ]

class Palette(Structure):
    _fields_ = [
        ('ncolors', c_int),
        ('colors', POINTER(Color)),
        ('version', Uint32),
        ('refcount', c_int)
    ]

class PixelFormat(Structure):
    _fields_ = [
        ('format', Uint32),
        ('palette', POINTER(Palette)),
        ('BitsPerPixel', Uint8),
        ('BytesPerPixel', Uint8),
        ('padding', (Uint8*2)),
        ('Rmask', Uint32),
        ('Gmask', Uint32),
        ('Bmask', Uint32),
        ('Amask', Uint32),
        ('Rloss', Uint8),
        ('Gloss', Uint8),
        ('Bloss', Uint8),
        ('Aloss', Uint8),
        ('Rshift', Uint8),
        ('Gshift', Uint8),
        ('Bshift', Uint8),
        ('Ashift', Uint8),
        ('refcount', c_int),
        ('next', c_void_p)
    ]

allocFormat = lib.SDL_AllocFormat
allocFormat.restype  = POINTER(PixelFormat)
allocFormat.argtypes = [Uint32]

freeFormat = lib.SDL_FreeFormat
freeFormat.restype  = None
freeFormat.argtypes = [POINTER(PixelFormat)]

allocPalette = lib.SDL_AllocPalette
allocPalette.restype  = POINTER(Palette)
allocPalette.argtypes = [c_int]

setPixelFormatPalette = lib.SDL_SetPixelFormatPalette
setPixelFormatPalette.restype  = c_int
setPixelFormatPalette.argtypes = [POINTER(PixelFormat), POINTER(Palette)]

setPaletteColors = lib.SDL_SetPaletteColors
setPaletteColors.restype  = c_int
setPaletteColors.argtypes = [POINTER(Palette), POINTER(Color), c_int, c_int]

freePalette = lib.SDL_FreePalette
freePalette.restype  = None
freePalette.argtypes = [POINTER(Palette)]

mapRGB = lib.SDL_MapRGB
mapRGB.restype  = Uint32
mapRGB.argtypes = [POINTER(PixelFormat), Uint8, Uint8, Uint8]

mapRGBA = lib.SDL_MapRGBA
mapRGBA.restype  = Uint32
mapRGBA.argtypes = [POINTER(PixelFormat), Uint8, Uint8, Uint8, Uint8]

getRGB = lib.SDL_GetRGB
getRGB.restype  = None
getRGB.argtypes = [Uint32, POINTER(PixelFormat), POINTER(Uint8), POINTER(Uint8), POINTER(Uint8)]

getRGBA = lib.SDL_GetRGBA
getRGBA.restype  = None
getRGBA.argtypes = [Uint32, POINTER(PixelFormat), POINTER(Uint8), POINTER(Uint8), POINTER(Uint8), POINTER(Uint8)]

calculateGammaRamp = lib.SDL_CalculateGammaRamp
calculateGammaRamp.restype  = None
calculateGammaRamp.argtypes = [c_float, POINTER(Uint16)]

class Rect(Structure):
    _fields_ = [
        ('x', c_int),
        ('y', c_int),
        ('w', c_int),
        ('h', c_int)
    ]

hasIntersection = lib.SDL_HasIntersection
hasIntersection.restype  = bool
hasIntersection.argtypes = [POINTER(Rect), POINTER(Rect)]

intersectRect = lib.SDL_IntersectRect
intersectRect.restype  = bool
intersectRect.argtypes = [POINTER(Rect), POINTER(Rect), POINTER(Rect)]

unionRect = lib.SDL_UnionRect
unionRect.restype  = None
unionRect.argtypes = [POINTER(Rect), POINTER(Rect), POINTER(Rect)]

class Point(Structure):
    _fields_ = [
        ('x', c_int),
        ('y', c_int)
    ]

enclosePoints = lib.SDL_EnclosePoints
enclosePoints.restype  = bool
enclosePoints.argtypes = [POINTER(Point), c_int, POINTER(Rect), POINTER(Rect)]

intersectRectAndLine = lib.SDL_IntersectRectAndLine
intersectRectAndLine.restype  = bool
intersectRectAndLine.argtypes = [POINTER(Rect), POINTER(c_int), POINTER(c_int), POINTER(c_int), POINTER(c_int)]
BLENDMODE_NONE = 0
BLENDMODE_BLEND = 1
BLENDMODE_ADD = 2
BLENDMODE_MOD = 3

class BlitMap(Structure):
    _fields_ = [
        
    ]

class Surface(Structure):
    _fields_ = [
        ('flags', Uint32),
        ('format', POINTER(PixelFormat)),
        ('w', c_int),
        ('h', c_int),
        ('pitch', c_int),
        ('pixels', c_void_p),
        ('userdata', c_void_p),
        ('locked', c_int),
        ('lock_data', c_void_p),
        ('clip_rect', Rect),
        ('SDL_BlitMap', BlitMap),
        ('map', c_void_p),
        ('refcount', c_int)
    ]

createRGBSurface = lib.SDL_CreateRGBSurface
createRGBSurface.restype  = POINTER(Surface)
createRGBSurface.argtypes = [Uint32, c_int, c_int, c_int, Uint32, Uint32, Uint32, Uint32]

createRGBSurfaceFrom = lib.SDL_CreateRGBSurfaceFrom
createRGBSurfaceFrom.restype  = POINTER(Surface)
createRGBSurfaceFrom.argtypes = [c_void_p, c_int, c_int, c_int, c_int, Uint32, Uint32, Uint32, Uint32]

freeSurface = lib.SDL_FreeSurface
freeSurface.restype  = None
freeSurface.argtypes = [POINTER(Surface)]

setSurfacePalette = lib.SDL_SetSurfacePalette
setSurfacePalette.restype  = c_int
setSurfacePalette.argtypes = [POINTER(Surface), POINTER(Palette)]

lockSurface = lib.SDL_LockSurface
lockSurface.restype  = c_int
lockSurface.argtypes = [POINTER(Surface)]

unlockSurface = lib.SDL_UnlockSurface
unlockSurface.restype  = None
unlockSurface.argtypes = [POINTER(Surface)]

loadBMP_RW = lib.SDL_LoadBMP_RW
loadBMP_RW.restype  = POINTER(Surface)
loadBMP_RW.argtypes = [POINTER(RWops), c_int]

saveBMP_RW = lib.SDL_SaveBMP_RW
saveBMP_RW.restype  = c_int
saveBMP_RW.argtypes = [POINTER(Surface), POINTER(RWops), c_int]

setSurfaceRLE = lib.SDL_SetSurfaceRLE
setSurfaceRLE.restype  = c_int
setSurfaceRLE.argtypes = [POINTER(Surface), c_int]

setColorKey = lib.SDL_SetColorKey
setColorKey.restype  = c_int
setColorKey.argtypes = [POINTER(Surface), c_int, Uint32]

getColorKey = lib.SDL_GetColorKey
getColorKey.restype  = c_int
getColorKey.argtypes = [POINTER(Surface), POINTER(Uint32)]

setSurfaceColorMod = lib.SDL_SetSurfaceColorMod
setSurfaceColorMod.restype  = c_int
setSurfaceColorMod.argtypes = [POINTER(Surface), Uint8, Uint8, Uint8]

getSurfaceColorMod = lib.SDL_GetSurfaceColorMod
getSurfaceColorMod.restype  = c_int
getSurfaceColorMod.argtypes = [POINTER(Surface), POINTER(Uint8), POINTER(Uint8), POINTER(Uint8)]

setSurfaceAlphaMod = lib.SDL_SetSurfaceAlphaMod
setSurfaceAlphaMod.restype  = c_int
setSurfaceAlphaMod.argtypes = [POINTER(Surface), Uint8]

getSurfaceAlphaMod = lib.SDL_GetSurfaceAlphaMod
getSurfaceAlphaMod.restype  = c_int
getSurfaceAlphaMod.argtypes = [POINTER(Surface), POINTER(Uint8)]

BlendMode = c_int

setSurfaceBlendMode = lib.SDL_SetSurfaceBlendMode
setSurfaceBlendMode.restype  = c_int
setSurfaceBlendMode.argtypes = [POINTER(Surface), BlendMode]

getSurfaceBlendMode = lib.SDL_GetSurfaceBlendMode
getSurfaceBlendMode.restype  = c_int
getSurfaceBlendMode.argtypes = [POINTER(Surface), POINTER(BlendMode)]

setClipRect = lib.SDL_SetClipRect
setClipRect.restype  = bool
setClipRect.argtypes = [POINTER(Surface), POINTER(Rect)]

getClipRect = lib.SDL_GetClipRect
getClipRect.restype  = None
getClipRect.argtypes = [POINTER(Surface), POINTER(Rect)]

convertSurface = lib.SDL_ConvertSurface
convertSurface.restype  = POINTER(Surface)
convertSurface.argtypes = [POINTER(Surface), POINTER(PixelFormat), Uint32]

convertSurfaceFormat = lib.SDL_ConvertSurfaceFormat
convertSurfaceFormat.restype  = POINTER(Surface)
convertSurfaceFormat.argtypes = [POINTER(Surface), Uint32, Uint32]

convertPixels = lib.SDL_ConvertPixels
convertPixels.restype  = c_int
convertPixels.argtypes = [c_int, c_int, Uint32, c_void_p, c_int, Uint32, c_void_p, c_int]

fillRect = lib.SDL_FillRect
fillRect.restype  = c_int
fillRect.argtypes = [POINTER(Surface), POINTER(Rect), Uint32]

fillRects = lib.SDL_FillRects
fillRects.restype  = c_int
fillRects.argtypes = [POINTER(Surface), POINTER(Rect), c_int, Uint32]

lowerBlit = lib.SDL_LowerBlit
lowerBlit.restype  = c_int
lowerBlit.argtypes = [POINTER(Surface), POINTER(Rect), POINTER(Surface), POINTER(Rect)]

lowerBlitScaled = lib.SDL_LowerBlitScaled
lowerBlitScaled.restype  = c_int
lowerBlitScaled.argtypes = [POINTER(Surface), POINTER(Rect), POINTER(Surface), POINTER(Rect)]
WINDOW_FULLSCREEN = 0
WINDOW_OPENGL = 1
WINDOW_SHOWN = 2
WINDOW_HIDDEN = 3
WINDOW_BORDERLESS = 4
WINDOW_RESIZABLE = 5
WINDOW_MINIMIZED = 6
WINDOW_MAXIMIZED = 7
WINDOW_INPUT_GRABBED = 8
WINDOW_INPUT_FOCUS = 9
WINDOW_MOUSE_FOCUS = 10
WINDOW_FULLSCREEN_DESKTOP = ( WINDOW_FULLSCREEN | 0x00001000 )
WINDOW_FOREIGN = ( WINDOW_FULLSCREEN | 0x00001000 )
WINDOWEVENT_NONE = 0
WINDOWEVENT_SHOWN = 1
WINDOWEVENT_HIDDEN = 2
WINDOWEVENT_EXPOSED = 3
WINDOWEVENT_MOVED = 4
WINDOWEVENT_RESIZED = 5
WINDOWEVENT_SIZE_CHANGED = 6
WINDOWEVENT_MINIMIZED = 7
WINDOWEVENT_MAXIMIZED = 8
WINDOWEVENT_RESTORED = 9
WINDOWEVENT_ENTER = 10
WINDOWEVENT_LEAVE = 11
WINDOWEVENT_FOCUS_GAINED = 12
WINDOWEVENT_FOCUS_LOST = 13
WINDOWEVENT_CLOSE = 14
GL_RED_SIZE = 0
GL_GREEN_SIZE = 1
GL_BLUE_SIZE = 2
GL_ALPHA_SIZE = 3
GL_BUFFER_SIZE = 4
GL_DOUBLEBUFFER = 5
GL_DEPTH_SIZE = 6
GL_STENCIL_SIZE = 7
GL_ACCUM_RED_SIZE = 8
GL_ACCUM_GREEN_SIZE = 9
GL_ACCUM_BLUE_SIZE = 10
GL_ACCUM_ALPHA_SIZE = 11
GL_STEREO = 12
GL_MULTISAMPLEBUFFERS = 13
GL_MULTISAMPLESAMPLES = 14
GL_ACCELERATED_VISUAL = 15
GL_RETAINED_BACKING = 16
GL_CONTEXT_MAJOR_VERSION = 17
GL_CONTEXT_MINOR_VERSION = 18
GL_CONTEXT_EGL = 19
GL_CONTEXT_FLAGS = 20
GL_CONTEXT_PROFILE_MASK = 21
GL_SHARE_WITH_CURRENT_CONTEXT = 22
GL_CONTEXT_PROFILE_CORE = 0
GL_CONTEXT_PROFILE_COMPATIBILITY = 1
GL_CONTEXT_PROFILE_ES = 2
GL_CONTEXT_DEBUG_FLAG = 0
GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 1
GL_CONTEXT_ROBUST_ACCESS_FLAG = 2
GL_CONTEXT_RESET_ISOLATION_FLAG = 3

getNumVideoDrivers = lib.SDL_GetNumVideoDrivers
getNumVideoDrivers.restype  = c_int
getNumVideoDrivers.argtypes = []

getVideoDriver = lib.SDL_GetVideoDriver
getVideoDriver.restype  = c_char_p
getVideoDriver.argtypes = [c_int]

videoInit = lib.SDL_VideoInit
videoInit.restype  = c_int
videoInit.argtypes = [c_char_p]

videoQuit = lib.SDL_VideoQuit
videoQuit.restype  = None
videoQuit.argtypes = []

getCurrentVideoDriver = lib.SDL_GetCurrentVideoDriver
getCurrentVideoDriver.restype  = c_char_p
getCurrentVideoDriver.argtypes = []

getNumVideoDisplays = lib.SDL_GetNumVideoDisplays
getNumVideoDisplays.restype  = c_int
getNumVideoDisplays.argtypes = []

getDisplayName = lib.SDL_GetDisplayName
getDisplayName.restype  = c_char_p
getDisplayName.argtypes = [c_int]

getDisplayBounds = lib.SDL_GetDisplayBounds
getDisplayBounds.restype  = c_int
getDisplayBounds.argtypes = [c_int, POINTER(Rect)]

getNumDisplayModes = lib.SDL_GetNumDisplayModes
getNumDisplayModes.restype  = c_int
getNumDisplayModes.argtypes = [c_int]

class DisplayMode(Structure):
    _fields_ = [
        ('format', Uint32),
        ('w', c_int),
        ('h', c_int),
        ('refresh_rate', c_int),
        ('driverdata', c_void_p)
    ]

getDisplayMode = lib.SDL_GetDisplayMode
getDisplayMode.restype  = c_int
getDisplayMode.argtypes = [c_int, c_int, POINTER(DisplayMode)]

getDesktopDisplayMode = lib.SDL_GetDesktopDisplayMode
getDesktopDisplayMode.restype  = c_int
getDesktopDisplayMode.argtypes = [c_int, POINTER(DisplayMode)]

getCurrentDisplayMode = lib.SDL_GetCurrentDisplayMode
getCurrentDisplayMode.restype  = c_int
getCurrentDisplayMode.argtypes = [c_int, POINTER(DisplayMode)]

getClosestDisplayMode = lib.SDL_GetClosestDisplayMode
getClosestDisplayMode.restype  = POINTER(DisplayMode)
getClosestDisplayMode.argtypes = [c_int, POINTER(DisplayMode), POINTER(DisplayMode)]

class Window(Structure):
    _fields_ = [
        
    ]

getWindowDisplayIndex = lib.SDL_GetWindowDisplayIndex
getWindowDisplayIndex.restype  = c_int
getWindowDisplayIndex.argtypes = [POINTER(Window)]

setWindowDisplayMode = lib.SDL_SetWindowDisplayMode
setWindowDisplayMode.restype  = c_int
setWindowDisplayMode.argtypes = [POINTER(Window), POINTER(DisplayMode)]

getWindowDisplayMode = lib.SDL_GetWindowDisplayMode
getWindowDisplayMode.restype  = c_int
getWindowDisplayMode.argtypes = [POINTER(Window), POINTER(DisplayMode)]

getWindowPixelFormat = lib.SDL_GetWindowPixelFormat
getWindowPixelFormat.restype  = Uint32
getWindowPixelFormat.argtypes = [POINTER(Window)]

createWindow = lib.SDL_CreateWindow
createWindow.restype  = POINTER(Window)
createWindow.argtypes = [c_char_p, c_int, c_int, c_int, c_int, Uint32]

createWindowFrom = lib.SDL_CreateWindowFrom
createWindowFrom.restype  = POINTER(Window)
createWindowFrom.argtypes = [c_void_p]

getWindowID = lib.SDL_GetWindowID
getWindowID.restype  = Uint32
getWindowID.argtypes = [POINTER(Window)]

getWindowFromID = lib.SDL_GetWindowFromID
getWindowFromID.restype  = POINTER(Window)
getWindowFromID.argtypes = [Uint32]

getWindowFlags = lib.SDL_GetWindowFlags
getWindowFlags.restype  = Uint32
getWindowFlags.argtypes = [POINTER(Window)]

setWindowTitle = lib.SDL_SetWindowTitle
setWindowTitle.restype  = None
setWindowTitle.argtypes = [POINTER(Window), c_char_p]

getWindowTitle = lib.SDL_GetWindowTitle
getWindowTitle.restype  = c_char_p
getWindowTitle.argtypes = [POINTER(Window)]

setWindowIcon = lib.SDL_SetWindowIcon
setWindowIcon.restype  = None
setWindowIcon.argtypes = [POINTER(Window), POINTER(Surface)]

setWindowData = lib.SDL_SetWindowData
setWindowData.restype  = c_void_p
setWindowData.argtypes = [POINTER(Window), c_char_p, c_void_p]

getWindowData = lib.SDL_GetWindowData
getWindowData.restype  = c_void_p
getWindowData.argtypes = [POINTER(Window), c_char_p]

setWindowPosition = lib.SDL_SetWindowPosition
setWindowPosition.restype  = None
setWindowPosition.argtypes = [POINTER(Window), c_int, c_int]

getWindowPosition = lib.SDL_GetWindowPosition
getWindowPosition.restype  = None
getWindowPosition.argtypes = [POINTER(Window), POINTER(c_int), POINTER(c_int)]

setWindowSize = lib.SDL_SetWindowSize
setWindowSize.restype  = None
setWindowSize.argtypes = [POINTER(Window), c_int, c_int]

getWindowSize = lib.SDL_GetWindowSize
getWindowSize.restype  = None
getWindowSize.argtypes = [POINTER(Window), POINTER(c_int), POINTER(c_int)]

setWindowMinimumSize = lib.SDL_SetWindowMinimumSize
setWindowMinimumSize.restype  = None
setWindowMinimumSize.argtypes = [POINTER(Window), c_int, c_int]

getWindowMinimumSize = lib.SDL_GetWindowMinimumSize
getWindowMinimumSize.restype  = None
getWindowMinimumSize.argtypes = [POINTER(Window), POINTER(c_int), POINTER(c_int)]

setWindowMaximumSize = lib.SDL_SetWindowMaximumSize
setWindowMaximumSize.restype  = None
setWindowMaximumSize.argtypes = [POINTER(Window), c_int, c_int]

getWindowMaximumSize = lib.SDL_GetWindowMaximumSize
getWindowMaximumSize.restype  = None
getWindowMaximumSize.argtypes = [POINTER(Window), POINTER(c_int), POINTER(c_int)]

setWindowBordered = lib.SDL_SetWindowBordered
setWindowBordered.restype  = None
setWindowBordered.argtypes = [POINTER(Window), bool]

showWindow = lib.SDL_ShowWindow
showWindow.restype  = None
showWindow.argtypes = [POINTER(Window)]

hideWindow = lib.SDL_HideWindow
hideWindow.restype  = None
hideWindow.argtypes = [POINTER(Window)]

raiseWindow = lib.SDL_RaiseWindow
raiseWindow.restype  = None
raiseWindow.argtypes = [POINTER(Window)]

maximizeWindow = lib.SDL_MaximizeWindow
maximizeWindow.restype  = None
maximizeWindow.argtypes = [POINTER(Window)]

minimizeWindow = lib.SDL_MinimizeWindow
minimizeWindow.restype  = None
minimizeWindow.argtypes = [POINTER(Window)]

restoreWindow = lib.SDL_RestoreWindow
restoreWindow.restype  = None
restoreWindow.argtypes = [POINTER(Window)]

setWindowFullscreen = lib.SDL_SetWindowFullscreen
setWindowFullscreen.restype  = c_int
setWindowFullscreen.argtypes = [POINTER(Window), Uint32]

getWindowSurface = lib.SDL_GetWindowSurface
getWindowSurface.restype  = POINTER(Surface)
getWindowSurface.argtypes = [POINTER(Window)]

updateWindowSurface = lib.SDL_UpdateWindowSurface
updateWindowSurface.restype  = c_int
updateWindowSurface.argtypes = [POINTER(Window)]

updateWindowSurfaceRects = lib.SDL_UpdateWindowSurfaceRects
updateWindowSurfaceRects.restype  = c_int
updateWindowSurfaceRects.argtypes = [POINTER(Window), POINTER(Rect), c_int]

setWindowGrab = lib.SDL_SetWindowGrab
setWindowGrab.restype  = None
setWindowGrab.argtypes = [POINTER(Window), bool]

getWindowGrab = lib.SDL_GetWindowGrab
getWindowGrab.restype  = bool
getWindowGrab.argtypes = [POINTER(Window)]

setWindowBrightness = lib.SDL_SetWindowBrightness
setWindowBrightness.restype  = c_int
setWindowBrightness.argtypes = [POINTER(Window), c_float]

getWindowBrightness = lib.SDL_GetWindowBrightness
getWindowBrightness.restype  = c_float
getWindowBrightness.argtypes = [POINTER(Window)]

setWindowGammaRamp = lib.SDL_SetWindowGammaRamp
setWindowGammaRamp.restype  = c_int
setWindowGammaRamp.argtypes = [POINTER(Window), POINTER(Uint16), POINTER(Uint16), POINTER(Uint16)]

getWindowGammaRamp = lib.SDL_GetWindowGammaRamp
getWindowGammaRamp.restype  = c_int
getWindowGammaRamp.argtypes = [POINTER(Window), POINTER(Uint16), POINTER(Uint16), POINTER(Uint16)]

destroyWindow = lib.SDL_DestroyWindow
destroyWindow.restype  = None
destroyWindow.argtypes = [POINTER(Window)]

isScreenSaverEnabled = lib.SDL_IsScreenSaverEnabled
isScreenSaverEnabled.restype  = bool
isScreenSaverEnabled.argtypes = []

enableScreenSaver = lib.SDL_EnableScreenSaver
enableScreenSaver.restype  = None
enableScreenSaver.argtypes = []

disableScreenSaver = lib.SDL_DisableScreenSaver
disableScreenSaver.restype  = None
disableScreenSaver.argtypes = []

GL_LoadLibrary = lib.SDL_GL_LoadLibrary
GL_LoadLibrary.restype  = c_int
GL_LoadLibrary.argtypes = [c_char_p]

GL_GetProcAddress = lib.SDL_GL_GetProcAddress
GL_GetProcAddress.restype  = c_void_p
GL_GetProcAddress.argtypes = [c_char_p]

GL_UnloadLibrary = lib.SDL_GL_UnloadLibrary
GL_UnloadLibrary.restype  = None
GL_UnloadLibrary.argtypes = []

GL_ExtensionSupported = lib.SDL_GL_ExtensionSupported
GL_ExtensionSupported.restype  = bool
GL_ExtensionSupported.argtypes = [c_char_p]

GLattr = c_int

GL_SetAttribute = lib.SDL_GL_SetAttribute
GL_SetAttribute.restype  = c_int
GL_SetAttribute.argtypes = [GLattr, c_int]

GL_GetAttribute = lib.SDL_GL_GetAttribute
GL_GetAttribute.restype  = c_int
GL_GetAttribute.argtypes = [GLattr, POINTER(c_int)]

GLContext = c_void_p

GL_CreateContext = lib.SDL_GL_CreateContext
GL_CreateContext.restype  = GLContext
GL_CreateContext.argtypes = [POINTER(Window)]

GL_MakeCurrent = lib.SDL_GL_MakeCurrent
GL_MakeCurrent.restype  = c_int
GL_MakeCurrent.argtypes = [POINTER(Window), GLContext]

GL_GetCurrentWindow = lib.SDL_GL_GetCurrentWindow
GL_GetCurrentWindow.restype  = POINTER(Window)
GL_GetCurrentWindow.argtypes = []

GL_GetCurrentContext = lib.SDL_GL_GetCurrentContext
GL_GetCurrentContext.restype  = GLContext
GL_GetCurrentContext.argtypes = []

GL_SetSwapInterval = lib.SDL_GL_SetSwapInterval
GL_SetSwapInterval.restype  = c_int
GL_SetSwapInterval.argtypes = [c_int]

GL_GetSwapInterval = lib.SDL_GL_GetSwapInterval
GL_GetSwapInterval.restype  = c_int
GL_GetSwapInterval.argtypes = []

GL_SwapWindow = lib.SDL_GL_SwapWindow
GL_SwapWindow.restype  = None
GL_SwapWindow.argtypes = [POINTER(Window)]

GL_DeleteContext = lib.SDL_GL_DeleteContext
GL_DeleteContext.restype  = None
GL_DeleteContext.argtypes = [GLContext]
SCANCODE_UNKNOWN = 0
SCANCODE_A = 1
SCANCODE_B = 2
SCANCODE_C = 3
SCANCODE_D = 4
SCANCODE_E = 5
SCANCODE_F = 6
SCANCODE_G = 7
SCANCODE_H = 8
SCANCODE_I = 9
SCANCODE_J = 10
SCANCODE_K = 11
SCANCODE_L = 12
SCANCODE_M = 13
SCANCODE_N = 14
SCANCODE_O = 15
SCANCODE_P = 16
SCANCODE_Q = 17
SCANCODE_R = 18
SCANCODE_S = 19
SCANCODE_T = 20
SCANCODE_U = 21
SCANCODE_V = 22
SCANCODE_W = 23
SCANCODE_X = 24
SCANCODE_Y = 25
SCANCODE_Z = 26
SCANCODE_1 = 27
SCANCODE_2 = 28
SCANCODE_3 = 29
SCANCODE_4 = 30
SCANCODE_5 = 31
SCANCODE_6 = 32
SCANCODE_7 = 33
SCANCODE_8 = 34
SCANCODE_9 = 35
SCANCODE_0 = 36
SCANCODE_RETURN = 37
SCANCODE_ESCAPE = 38
SCANCODE_BACKSPACE = 39
SCANCODE_TAB = 40
SCANCODE_SPACE = 41
SCANCODE_MINUS = 42
SCANCODE_EQUALS = 43
SCANCODE_LEFTBRACKET = 44
SCANCODE_RIGHTBRACKET = 45
SCANCODE_BACKSLASH = 46
SCANCODE_NONUSHASH = 47
SCANCODE_SEMICOLON = 48
SCANCODE_APOSTROPHE = 49
SCANCODE_GRAVE = 50
SCANCODE_COMMA = 51
SCANCODE_PERIOD = 52
SCANCODE_SLASH = 53
SCANCODE_CAPSLOCK = 54
SCANCODE_F1 = 55
SCANCODE_F2 = 56
SCANCODE_F3 = 57
SCANCODE_F4 = 58
SCANCODE_F5 = 59
SCANCODE_F6 = 60
SCANCODE_F7 = 61
SCANCODE_F8 = 62
SCANCODE_F9 = 63
SCANCODE_F10 = 64
SCANCODE_F11 = 65
SCANCODE_F12 = 66
SCANCODE_PRINTSCREEN = 67
SCANCODE_SCROLLLOCK = 68
SCANCODE_PAUSE = 69
SCANCODE_INSERT = 70
SCANCODE_HOME = 71
SCANCODE_PAGEUP = 72
SCANCODE_DELETE = 73
SCANCODE_END = 74
SCANCODE_PAGEDOWN = 75
SCANCODE_RIGHT = 76
SCANCODE_LEFT = 77
SCANCODE_DOWN = 78
SCANCODE_UP = 79
SCANCODE_NUMLOCKCLEAR = 80
SCANCODE_KP_DIVIDE = 81
SCANCODE_KP_MULTIPLY = 82
SCANCODE_KP_MINUS = 83
SCANCODE_KP_PLUS = 84
SCANCODE_KP_ENTER = 85
SCANCODE_KP_1 = 86
SCANCODE_KP_2 = 87
SCANCODE_KP_3 = 88
SCANCODE_KP_4 = 89
SCANCODE_KP_5 = 90
SCANCODE_KP_6 = 91
SCANCODE_KP_7 = 92
SCANCODE_KP_8 = 93
SCANCODE_KP_9 = 94
SCANCODE_KP_0 = 95
SCANCODE_KP_PERIOD = 96
SCANCODE_NONUSBACKSLASH = 97
SCANCODE_APPLICATION = 98
SCANCODE_POWER = 99
SCANCODE_KP_EQUALS = 100
SCANCODE_F13 = 101
SCANCODE_F14 = 102
SCANCODE_F15 = 103
SCANCODE_F16 = 104
SCANCODE_F17 = 105
SCANCODE_F18 = 106
SCANCODE_F19 = 107
SCANCODE_F20 = 108
SCANCODE_F21 = 109
SCANCODE_F22 = 110
SCANCODE_F23 = 111
SCANCODE_F24 = 112
SCANCODE_EXECUTE = 113
SCANCODE_HELP = 114
SCANCODE_MENU = 115
SCANCODE_SELECT = 116
SCANCODE_STOP = 117
SCANCODE_AGAIN = 118
SCANCODE_UNDO = 119
SCANCODE_CUT = 120
SCANCODE_COPY = 121
SCANCODE_PASTE = 122
SCANCODE_FIND = 123
SCANCODE_MUTE = 124
SCANCODE_VOLUMEUP = 125
SCANCODE_VOLUMEDOWN = 126
SCANCODE_KP_COMMA = 127
SCANCODE_KP_EQUALSAS400 = 128
SCANCODE_INTERNATIONAL1 = 129
SCANCODE_INTERNATIONAL2 = 130
SCANCODE_INTERNATIONAL3 = 131
SCANCODE_INTERNATIONAL4 = 132
SCANCODE_INTERNATIONAL5 = 133
SCANCODE_INTERNATIONAL6 = 134
SCANCODE_INTERNATIONAL7 = 135
SCANCODE_INTERNATIONAL8 = 136
SCANCODE_INTERNATIONAL9 = 137
SCANCODE_LANG1 = 138
SCANCODE_LANG2 = 139
SCANCODE_LANG3 = 140
SCANCODE_LANG4 = 141
SCANCODE_LANG5 = 142
SCANCODE_LANG6 = 143
SCANCODE_LANG7 = 144
SCANCODE_LANG8 = 145
SCANCODE_LANG9 = 146
SCANCODE_ALTERASE = 147
SCANCODE_SYSREQ = 148
SCANCODE_CANCEL = 149
SCANCODE_CLEAR = 150
SCANCODE_PRIOR = 151
SCANCODE_RETURN2 = 152
SCANCODE_SEPARATOR = 153
SCANCODE_OUT = 154
SCANCODE_OPER = 155
SCANCODE_CLEARAGAIN = 156
SCANCODE_CRSEL = 157
SCANCODE_EXSEL = 158
SCANCODE_KP_00 = 159
SCANCODE_KP_000 = 160
SCANCODE_THOUSANDSSEPARATOR = 161
SCANCODE_DECIMALSEPARATOR = 162
SCANCODE_CURRENCYUNIT = 163
SCANCODE_CURRENCYSUBUNIT = 164
SCANCODE_KP_LEFTPAREN = 165
SCANCODE_KP_RIGHTPAREN = 166
SCANCODE_KP_LEFTBRACE = 167
SCANCODE_KP_RIGHTBRACE = 168
SCANCODE_KP_TAB = 169
SCANCODE_KP_BACKSPACE = 170
SCANCODE_KP_A = 171
SCANCODE_KP_B = 172
SCANCODE_KP_C = 173
SCANCODE_KP_D = 174
SCANCODE_KP_E = 175
SCANCODE_KP_F = 176
SCANCODE_KP_XOR = 177
SCANCODE_KP_POWER = 178
SCANCODE_KP_PERCENT = 179
SCANCODE_KP_LESS = 180
SCANCODE_KP_GREATER = 181
SCANCODE_KP_AMPERSAND = 182
SCANCODE_KP_DBLAMPERSAND = 183
SCANCODE_KP_VERTICALBAR = 184
SCANCODE_KP_DBLVERTICALBAR = 185
SCANCODE_KP_COLON = 186
SCANCODE_KP_HASH = 187
SCANCODE_KP_SPACE = 188
SCANCODE_KP_AT = 189
SCANCODE_KP_EXCLAM = 190
SCANCODE_KP_MEMSTORE = 191
SCANCODE_KP_MEMRECALL = 192
SCANCODE_KP_MEMCLEAR = 193
SCANCODE_KP_MEMADD = 194
SCANCODE_KP_MEMSUBTRACT = 195
SCANCODE_KP_MEMMULTIPLY = 196
SCANCODE_KP_MEMDIVIDE = 197
SCANCODE_KP_PLUSMINUS = 198
SCANCODE_KP_CLEAR = 199
SCANCODE_KP_CLEARENTRY = 200
SCANCODE_KP_BINARY = 201
SCANCODE_KP_OCTAL = 202
SCANCODE_KP_DECIMAL = 203
SCANCODE_KP_HEXADECIMAL = 204
SCANCODE_LCTRL = 205
SCANCODE_LSHIFT = 206
SCANCODE_LALT = 207
SCANCODE_LGUI = 208
SCANCODE_RCTRL = 209
SCANCODE_RSHIFT = 210
SCANCODE_RALT = 211
SCANCODE_RGUI = 212
SCANCODE_MODE = 213
SCANCODE_AUDIONEXT = 214
SCANCODE_AUDIOPREV = 215
SCANCODE_AUDIOSTOP = 216
SCANCODE_AUDIOPLAY = 217
SCANCODE_AUDIOMUTE = 218
SCANCODE_MEDIASELECT = 219
SCANCODE_WWW = 220
SCANCODE_MAIL = 221
SCANCODE_CALCULATOR = 222
SCANCODE_COMPUTER = 223
SCANCODE_AC_SEARCH = 224
SCANCODE_AC_HOME = 225
SCANCODE_AC_BACK = 226
SCANCODE_AC_FORWARD = 227
SCANCODE_AC_STOP = 228
SCANCODE_AC_REFRESH = 229
SCANCODE_AC_BOOKMARKS = 230
SCANCODE_BRIGHTNESSDOWN = 231
SCANCODE_BRIGHTNESSUP = 232
SCANCODE_DISPLAYSWITCH = 233
SCANCODE_KBDILLUMTOGGLE = 234
SCANCODE_KBDILLUMDOWN = 235
SCANCODE_KBDILLUMUP = 236
SCANCODE_EJECT = 237
SCANCODE_SLEEP = 238
SCANCODE_APP1 = 239
SCANCODE_APP2 = 240
NUM_SCANCODES = 241
SDLK_UNKNOWN = 0
SDLK_RETURN = 1
SDLK_ESCAPE = 2
SDLK_BACKSPACE = 3
SDLK_TAB = 4
SDLK_SPACE = 5
SDLK_EXCLAIM = 6
SDLK_QUOTEDBL = 7
SDLK_HASH = 8
SDLK_PERCENT = 9
SDLK_DOLLAR = 10
SDLK_AMPERSAND = 11
SDLK_QUOTE = 12
SDLK_LEFTPAREN = 13
SDLK_RIGHTPAREN = 14
SDLK_ASTERISK = 15
SDLK_PLUS = 16
SDLK_COMMA = 17
SDLK_MINUS = 18
SDLK_PERIOD = 19
SDLK_SLASH = 20
SDLK_0 = 21
SDLK_1 = 22
SDLK_2 = 23
SDLK_3 = 24
SDLK_4 = 25
SDLK_5 = 26
SDLK_6 = 27
SDLK_7 = 28
SDLK_8 = 29
SDLK_9 = 30
SDLK_COLON = 31
SDLK_SEMICOLON = 32
SDLK_LESS = 33
SDLK_EQUALS = 34
SDLK_GREATER = 35
SDLK_QUESTION = 36
SDLK_AT = 37
SDLK_LEFTBRACKET = 38
SDLK_BACKSLASH = 39
SDLK_RIGHTBRACKET = 40
SDLK_CARET = 41
SDLK_UNDERSCORE = 42
SDLK_BACKQUOTE = 43
SDLK_a = 44
SDLK_b = 45
SDLK_c = 46
SDLK_d = 47
SDLK_e = 48
SDLK_f = 49
SDLK_g = 50
SDLK_h = 51
SDLK_i = 52
SDLK_j = 53
SDLK_k = 54
SDLK_l = 55
SDLK_m = 56
SDLK_n = 57
SDLK_o = 58
SDLK_p = 59
SDLK_q = 60
SDLK_r = 61
SDLK_s = 62
SDLK_t = 63
SDLK_u = 64
SDLK_v = 65
SDLK_w = 66
SDLK_x = 67
SDLK_y = 68
SDLK_z = 69
SDLK_CAPSLOCK = SCANCODE_TO_KEYCODE(SCANCODE_CAPSLOCK)
SDLK_F1 = SCANCODE_TO_KEYCODE(SCANCODE_F1)
SDLK_F2 = SCANCODE_TO_KEYCODE(SCANCODE_F2)
SDLK_F3 = SCANCODE_TO_KEYCODE(SCANCODE_F3)
SDLK_F4 = SCANCODE_TO_KEYCODE(SCANCODE_F4)
SDLK_F5 = SCANCODE_TO_KEYCODE(SCANCODE_F5)
SDLK_F6 = SCANCODE_TO_KEYCODE(SCANCODE_F6)
SDLK_F7 = SCANCODE_TO_KEYCODE(SCANCODE_F7)
SDLK_F8 = SCANCODE_TO_KEYCODE(SCANCODE_F8)
SDLK_F9 = SCANCODE_TO_KEYCODE(SCANCODE_F9)
SDLK_F10 = SCANCODE_TO_KEYCODE(SCANCODE_F10)
SDLK_F11 = SCANCODE_TO_KEYCODE(SCANCODE_F11)
SDLK_F12 = SCANCODE_TO_KEYCODE(SCANCODE_F12)
SDLK_PRINTSCREEN = SCANCODE_TO_KEYCODE(SCANCODE_PRINTSCREEN)
SDLK_SCROLLLOCK = SCANCODE_TO_KEYCODE(SCANCODE_SCROLLLOCK)
SDLK_PAUSE = SCANCODE_TO_KEYCODE(SCANCODE_PAUSE)
SDLK_INSERT = SCANCODE_TO_KEYCODE(SCANCODE_INSERT)
SDLK_HOME = SCANCODE_TO_KEYCODE(SCANCODE_HOME)
SDLK_PAGEUP = SCANCODE_TO_KEYCODE(SCANCODE_PAGEUP)
SDLK_DELETE = SCANCODE_TO_KEYCODE(SCANCODE_PAGEUP)
SDLK_END = SCANCODE_TO_KEYCODE(SCANCODE_END)
SDLK_PAGEDOWN = SCANCODE_TO_KEYCODE(SCANCODE_PAGEDOWN)
SDLK_RIGHT = SCANCODE_TO_KEYCODE(SCANCODE_RIGHT)
SDLK_LEFT = SCANCODE_TO_KEYCODE(SCANCODE_LEFT)
SDLK_DOWN = SCANCODE_TO_KEYCODE(SCANCODE_DOWN)
SDLK_UP = SCANCODE_TO_KEYCODE(SCANCODE_UP)
SDLK_NUMLOCKCLEAR = SCANCODE_TO_KEYCODE(SCANCODE_NUMLOCKCLEAR)
SDLK_KP_DIVIDE = SCANCODE_TO_KEYCODE(SCANCODE_KP_DIVIDE)
SDLK_KP_MULTIPLY = SCANCODE_TO_KEYCODE(SCANCODE_KP_MULTIPLY)
SDLK_KP_MINUS = SCANCODE_TO_KEYCODE(SCANCODE_KP_MINUS)
SDLK_KP_PLUS = SCANCODE_TO_KEYCODE(SCANCODE_KP_PLUS)
SDLK_KP_ENTER = SCANCODE_TO_KEYCODE(SCANCODE_KP_ENTER)
SDLK_KP_1 = SCANCODE_TO_KEYCODE(SCANCODE_KP_1)
SDLK_KP_2 = SCANCODE_TO_KEYCODE(SCANCODE_KP_2)
SDLK_KP_3 = SCANCODE_TO_KEYCODE(SCANCODE_KP_3)
SDLK_KP_4 = SCANCODE_TO_KEYCODE(SCANCODE_KP_4)
SDLK_KP_5 = SCANCODE_TO_KEYCODE(SCANCODE_KP_5)
SDLK_KP_6 = SCANCODE_TO_KEYCODE(SCANCODE_KP_6)
SDLK_KP_7 = SCANCODE_TO_KEYCODE(SCANCODE_KP_7)
SDLK_KP_8 = SCANCODE_TO_KEYCODE(SCANCODE_KP_8)
SDLK_KP_9 = SCANCODE_TO_KEYCODE(SCANCODE_KP_9)
SDLK_KP_0 = SCANCODE_TO_KEYCODE(SCANCODE_KP_0)
SDLK_KP_PERIOD = SCANCODE_TO_KEYCODE(SCANCODE_KP_PERIOD)
SDLK_APPLICATION = SCANCODE_TO_KEYCODE(SCANCODE_APPLICATION)
SDLK_POWER = SCANCODE_TO_KEYCODE(SCANCODE_POWER)
SDLK_KP_EQUALS = SCANCODE_TO_KEYCODE(SCANCODE_KP_EQUALS)
SDLK_F13 = SCANCODE_TO_KEYCODE(SCANCODE_F13)
SDLK_F14 = SCANCODE_TO_KEYCODE(SCANCODE_F14)
SDLK_F15 = SCANCODE_TO_KEYCODE(SCANCODE_F15)
SDLK_F16 = SCANCODE_TO_KEYCODE(SCANCODE_F16)
SDLK_F17 = SCANCODE_TO_KEYCODE(SCANCODE_F17)
SDLK_F18 = SCANCODE_TO_KEYCODE(SCANCODE_F18)
SDLK_F19 = SCANCODE_TO_KEYCODE(SCANCODE_F19)
SDLK_F20 = SCANCODE_TO_KEYCODE(SCANCODE_F20)
SDLK_F21 = SCANCODE_TO_KEYCODE(SCANCODE_F21)
SDLK_F22 = SCANCODE_TO_KEYCODE(SCANCODE_F22)
SDLK_F23 = SCANCODE_TO_KEYCODE(SCANCODE_F23)
SDLK_F24 = SCANCODE_TO_KEYCODE(SCANCODE_F24)
SDLK_EXECUTE = SCANCODE_TO_KEYCODE(SCANCODE_EXECUTE)
SDLK_HELP = SCANCODE_TO_KEYCODE(SCANCODE_HELP)
SDLK_MENU = SCANCODE_TO_KEYCODE(SCANCODE_MENU)
SDLK_SELECT = SCANCODE_TO_KEYCODE(SCANCODE_SELECT)
SDLK_STOP = SCANCODE_TO_KEYCODE(SCANCODE_STOP)
SDLK_AGAIN = SCANCODE_TO_KEYCODE(SCANCODE_AGAIN)
SDLK_UNDO = SCANCODE_TO_KEYCODE(SCANCODE_UNDO)
SDLK_CUT = SCANCODE_TO_KEYCODE(SCANCODE_CUT)
SDLK_COPY = SCANCODE_TO_KEYCODE(SCANCODE_COPY)
SDLK_PASTE = SCANCODE_TO_KEYCODE(SCANCODE_PASTE)
SDLK_FIND = SCANCODE_TO_KEYCODE(SCANCODE_FIND)
SDLK_MUTE = SCANCODE_TO_KEYCODE(SCANCODE_MUTE)
SDLK_VOLUMEUP = SCANCODE_TO_KEYCODE(SCANCODE_VOLUMEUP)
SDLK_VOLUMEDOWN = SCANCODE_TO_KEYCODE(SCANCODE_VOLUMEDOWN)
SDLK_KP_COMMA = SCANCODE_TO_KEYCODE(SCANCODE_KP_COMMA)
SDLK_KP_EQUALSAS400 = SCANCODE_TO_KEYCODE(SCANCODE_KP_EQUALSAS400)
SDLK_ALTERASE = SCANCODE_TO_KEYCODE(SCANCODE_ALTERASE)
SDLK_SYSREQ = SCANCODE_TO_KEYCODE(SCANCODE_SYSREQ)
SDLK_CANCEL = SCANCODE_TO_KEYCODE(SCANCODE_CANCEL)
SDLK_CLEAR = SCANCODE_TO_KEYCODE(SCANCODE_CLEAR)
SDLK_PRIOR = SCANCODE_TO_KEYCODE(SCANCODE_PRIOR)
SDLK_RETURN2 = SCANCODE_TO_KEYCODE(SCANCODE_RETURN2)
SDLK_SEPARATOR = SCANCODE_TO_KEYCODE(SCANCODE_SEPARATOR)
SDLK_OUT = SCANCODE_TO_KEYCODE(SCANCODE_OUT)
SDLK_OPER = SCANCODE_TO_KEYCODE(SCANCODE_OPER)
SDLK_CLEARAGAIN = SCANCODE_TO_KEYCODE(SCANCODE_CLEARAGAIN)
SDLK_CRSEL = SCANCODE_TO_KEYCODE(SCANCODE_CRSEL)
SDLK_EXSEL = SCANCODE_TO_KEYCODE(SCANCODE_EXSEL)
SDLK_KP_00 = SCANCODE_TO_KEYCODE(SCANCODE_KP_00)
SDLK_KP_000 = SCANCODE_TO_KEYCODE(SCANCODE_KP_000)
SDLK_THOUSANDSSEPARATOR = SCANCODE_TO_KEYCODE(SCANCODE_THOUSANDSSEPARATOR)
SDLK_DECIMALSEPARATOR = SCANCODE_TO_KEYCODE(SCANCODE_DECIMALSEPARATOR)
SDLK_CURRENCYUNIT = SCANCODE_TO_KEYCODE(SCANCODE_CURRENCYUNIT)
SDLK_CURRENCYSUBUNIT = SCANCODE_TO_KEYCODE(SCANCODE_CURRENCYSUBUNIT)
SDLK_KP_LEFTPAREN = SCANCODE_TO_KEYCODE(SCANCODE_KP_LEFTPAREN)
SDLK_KP_RIGHTPAREN = SCANCODE_TO_KEYCODE(SCANCODE_KP_RIGHTPAREN)
SDLK_KP_LEFTBRACE = SCANCODE_TO_KEYCODE(SCANCODE_KP_LEFTBRACE)
SDLK_KP_RIGHTBRACE = SCANCODE_TO_KEYCODE(SCANCODE_KP_RIGHTBRACE)
SDLK_KP_TAB = SCANCODE_TO_KEYCODE(SCANCODE_KP_TAB)
SDLK_KP_BACKSPACE = SCANCODE_TO_KEYCODE(SCANCODE_KP_BACKSPACE)
SDLK_KP_A = SCANCODE_TO_KEYCODE(SCANCODE_KP_A)
SDLK_KP_B = SCANCODE_TO_KEYCODE(SCANCODE_KP_B)
SDLK_KP_C = SCANCODE_TO_KEYCODE(SCANCODE_KP_C)
SDLK_KP_D = SCANCODE_TO_KEYCODE(SCANCODE_KP_D)
SDLK_KP_E = SCANCODE_TO_KEYCODE(SCANCODE_KP_E)
SDLK_KP_F = SCANCODE_TO_KEYCODE(SCANCODE_KP_F)
SDLK_KP_XOR = SCANCODE_TO_KEYCODE(SCANCODE_KP_XOR)
SDLK_KP_POWER = SCANCODE_TO_KEYCODE(SCANCODE_KP_POWER)
SDLK_KP_PERCENT = SCANCODE_TO_KEYCODE(SCANCODE_KP_PERCENT)
SDLK_KP_LESS = SCANCODE_TO_KEYCODE(SCANCODE_KP_LESS)
SDLK_KP_GREATER = SCANCODE_TO_KEYCODE(SCANCODE_KP_GREATER)
SDLK_KP_AMPERSAND = SCANCODE_TO_KEYCODE(SCANCODE_KP_AMPERSAND)
SDLK_KP_DBLAMPERSAND = SCANCODE_TO_KEYCODE(SCANCODE_KP_DBLAMPERSAND)
SDLK_KP_VERTICALBAR = SCANCODE_TO_KEYCODE(SCANCODE_KP_VERTICALBAR)
SDLK_KP_DBLVERTICALBAR = SCANCODE_TO_KEYCODE(SCANCODE_KP_DBLVERTICALBAR)
SDLK_KP_COLON = SCANCODE_TO_KEYCODE(SCANCODE_KP_COLON)
SDLK_KP_HASH = SCANCODE_TO_KEYCODE(SCANCODE_KP_HASH)
SDLK_KP_SPACE = SCANCODE_TO_KEYCODE(SCANCODE_KP_SPACE)
SDLK_KP_AT = SCANCODE_TO_KEYCODE(SCANCODE_KP_AT)
SDLK_KP_EXCLAM = SCANCODE_TO_KEYCODE(SCANCODE_KP_EXCLAM)
SDLK_KP_MEMSTORE = SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMSTORE)
SDLK_KP_MEMRECALL = SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMRECALL)
SDLK_KP_MEMCLEAR = SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMCLEAR)
SDLK_KP_MEMADD = SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMADD)
SDLK_KP_MEMSUBTRACT = SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMSUBTRACT)
SDLK_KP_MEMMULTIPLY = SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMMULTIPLY)
SDLK_KP_MEMDIVIDE = SCANCODE_TO_KEYCODE(SCANCODE_KP_MEMDIVIDE)
SDLK_KP_PLUSMINUS = SCANCODE_TO_KEYCODE(SCANCODE_KP_PLUSMINUS)
SDLK_KP_CLEAR = SCANCODE_TO_KEYCODE(SCANCODE_KP_CLEAR)
SDLK_KP_CLEARENTRY = SCANCODE_TO_KEYCODE(SCANCODE_KP_CLEARENTRY)
SDLK_KP_BINARY = SCANCODE_TO_KEYCODE(SCANCODE_KP_BINARY)
SDLK_KP_OCTAL = SCANCODE_TO_KEYCODE(SCANCODE_KP_OCTAL)
SDLK_KP_DECIMAL = SCANCODE_TO_KEYCODE(SCANCODE_KP_DECIMAL)
SDLK_KP_HEXADECIMAL = SCANCODE_TO_KEYCODE(SCANCODE_KP_HEXADECIMAL)
SDLK_LCTRL = SCANCODE_TO_KEYCODE(SCANCODE_LCTRL)
SDLK_LSHIFT = SCANCODE_TO_KEYCODE(SCANCODE_LSHIFT)
SDLK_LALT = SCANCODE_TO_KEYCODE(SCANCODE_LALT)
SDLK_LGUI = SCANCODE_TO_KEYCODE(SCANCODE_LGUI)
SDLK_RCTRL = SCANCODE_TO_KEYCODE(SCANCODE_RCTRL)
SDLK_RSHIFT = SCANCODE_TO_KEYCODE(SCANCODE_RSHIFT)
SDLK_RALT = SCANCODE_TO_KEYCODE(SCANCODE_RALT)
SDLK_RGUI = SCANCODE_TO_KEYCODE(SCANCODE_RGUI)
SDLK_MODE = SCANCODE_TO_KEYCODE(SCANCODE_MODE)
SDLK_AUDIONEXT = SCANCODE_TO_KEYCODE(SCANCODE_AUDIONEXT)
SDLK_AUDIOPREV = SCANCODE_TO_KEYCODE(SCANCODE_AUDIOPREV)
SDLK_AUDIOSTOP = SCANCODE_TO_KEYCODE(SCANCODE_AUDIOSTOP)
SDLK_AUDIOPLAY = SCANCODE_TO_KEYCODE(SCANCODE_AUDIOPLAY)
SDLK_AUDIOMUTE = SCANCODE_TO_KEYCODE(SCANCODE_AUDIOMUTE)
SDLK_MEDIASELECT = SCANCODE_TO_KEYCODE(SCANCODE_MEDIASELECT)
SDLK_WWW = SCANCODE_TO_KEYCODE(SCANCODE_WWW)
SDLK_MAIL = SCANCODE_TO_KEYCODE(SCANCODE_MAIL)
SDLK_CALCULATOR = SCANCODE_TO_KEYCODE(SCANCODE_CALCULATOR)
SDLK_COMPUTER = SCANCODE_TO_KEYCODE(SCANCODE_COMPUTER)
SDLK_AC_SEARCH = SCANCODE_TO_KEYCODE(SCANCODE_AC_SEARCH)
SDLK_AC_HOME = SCANCODE_TO_KEYCODE(SCANCODE_AC_HOME)
SDLK_AC_BACK = SCANCODE_TO_KEYCODE(SCANCODE_AC_BACK)
SDLK_AC_FORWARD = SCANCODE_TO_KEYCODE(SCANCODE_AC_FORWARD)
SDLK_AC_STOP = SCANCODE_TO_KEYCODE(SCANCODE_AC_STOP)
SDLK_AC_REFRESH = SCANCODE_TO_KEYCODE(SCANCODE_AC_REFRESH)
SDLK_AC_BOOKMARKS = SCANCODE_TO_KEYCODE(SCANCODE_AC_BOOKMARKS)
SDLK_BRIGHTNESSDOWN = SCANCODE_TO_KEYCODE(SCANCODE_BRIGHTNESSDOWN)
SDLK_BRIGHTNESSUP = SCANCODE_TO_KEYCODE(SCANCODE_BRIGHTNESSUP)
SDLK_DISPLAYSWITCH = SCANCODE_TO_KEYCODE(SCANCODE_DISPLAYSWITCH)
SDLK_KBDILLUMTOGGLE = SCANCODE_TO_KEYCODE(SCANCODE_KBDILLUMTOGGLE)
SDLK_KBDILLUMDOWN = SCANCODE_TO_KEYCODE(SCANCODE_KBDILLUMDOWN)
SDLK_KBDILLUMUP = SCANCODE_TO_KEYCODE(SCANCODE_KBDILLUMUP)
SDLK_EJECT = SCANCODE_TO_KEYCODE(SCANCODE_EJECT)
SDLK_SLEEP = SCANCODE_TO_KEYCODE(SCANCODE_SLEEP)
KMOD_NONE = 0
KMOD_LSHIFT = 1
KMOD_RSHIFT = 2
KMOD_LCTRL = 3
KMOD_RCTRL = 4
KMOD_LALT = 5
KMOD_RALT = 6
KMOD_LGUI = 7
KMOD_RGUI = 8
KMOD_NUM = 9
KMOD_CAPS = 10
KMOD_MODE = 11
KMOD_RESERVED = 12

getKeyboardFocus = lib.SDL_GetKeyboardFocus
getKeyboardFocus.restype  = POINTER(Window)
getKeyboardFocus.argtypes = []

getKeyboardState = lib.SDL_GetKeyboardState
getKeyboardState.restype  = POINTER(Uint8)
getKeyboardState.argtypes = [POINTER(c_int)]

Keymod = c_int

getModState = lib.SDL_GetModState
getModState.restype  = Keymod
getModState.argtypes = []

setModState = lib.SDL_SetModState
setModState.restype  = None
setModState.argtypes = [Keymod]

Keycode = c_int

Scancode = c_int

getKeyFromScancode = lib.SDL_GetKeyFromScancode
getKeyFromScancode.restype  = Keycode
getKeyFromScancode.argtypes = [Scancode]

getScancodeFromKey = lib.SDL_GetScancodeFromKey
getScancodeFromKey.restype  = Scancode
getScancodeFromKey.argtypes = [Keycode]

getScancodeName = lib.SDL_GetScancodeName
getScancodeName.restype  = c_char_p
getScancodeName.argtypes = [Scancode]

getScancodeFromName = lib.SDL_GetScancodeFromName
getScancodeFromName.restype  = Scancode
getScancodeFromName.argtypes = [c_char_p]

getKeyName = lib.SDL_GetKeyName
getKeyName.restype  = c_char_p
getKeyName.argtypes = [Keycode]

getKeyFromName = lib.SDL_GetKeyFromName
getKeyFromName.restype  = Keycode
getKeyFromName.argtypes = [c_char_p]

startTextInput = lib.SDL_StartTextInput
startTextInput.restype  = None
startTextInput.argtypes = []

isTextInputActive = lib.SDL_IsTextInputActive
isTextInputActive.restype  = bool
isTextInputActive.argtypes = []

stopTextInput = lib.SDL_StopTextInput
stopTextInput.restype  = None
stopTextInput.argtypes = []

setTextInputRect = lib.SDL_SetTextInputRect
setTextInputRect.restype  = None
setTextInputRect.argtypes = [POINTER(Rect)]

hasScreenKeyboardSupport = lib.SDL_HasScreenKeyboardSupport
hasScreenKeyboardSupport.restype  = bool
hasScreenKeyboardSupport.argtypes = []

isScreenKeyboardShown = lib.SDL_IsScreenKeyboardShown
isScreenKeyboardShown.restype  = bool
isScreenKeyboardShown.argtypes = [POINTER(Window)]
SYSTEM_CURSOR_ARROW = 0
SYSTEM_CURSOR_IBEAM = 1
SYSTEM_CURSOR_WAIT = 2
SYSTEM_CURSOR_CROSSHAIR = 3
SYSTEM_CURSOR_WAITARROW = 4
SYSTEM_CURSOR_SIZENWSE = 5
SYSTEM_CURSOR_SIZENESW = 6
SYSTEM_CURSOR_SIZEWE = 7
SYSTEM_CURSOR_SIZENS = 8
SYSTEM_CURSOR_SIZEALL = 9
SYSTEM_CURSOR_NO = 10
SYSTEM_CURSOR_HAND = 11
NUM_SYSTEM_CURSORS = 12

getMouseFocus = lib.SDL_GetMouseFocus
getMouseFocus.restype  = POINTER(Window)
getMouseFocus.argtypes = []

getMouseState = lib.SDL_GetMouseState
getMouseState.restype  = Uint32
getMouseState.argtypes = [POINTER(c_int), POINTER(c_int)]

getRelativeMouseState = lib.SDL_GetRelativeMouseState
getRelativeMouseState.restype  = Uint32
getRelativeMouseState.argtypes = [POINTER(c_int), POINTER(c_int)]

warpMouseInWindow = lib.SDL_WarpMouseInWindow
warpMouseInWindow.restype  = None
warpMouseInWindow.argtypes = [POINTER(Window), c_int, c_int]

setRelativeMouseMode = lib.SDL_SetRelativeMouseMode
setRelativeMouseMode.restype  = c_int
setRelativeMouseMode.argtypes = [bool]

getRelativeMouseMode = lib.SDL_GetRelativeMouseMode
getRelativeMouseMode.restype  = bool
getRelativeMouseMode.argtypes = []

class Cursor(Structure):
    _fields_ = [
        
    ]

createCursor = lib.SDL_CreateCursor
createCursor.restype  = POINTER(Cursor)
createCursor.argtypes = [POINTER(Uint8), POINTER(Uint8), c_int, c_int, c_int, c_int]

createColorCursor = lib.SDL_CreateColorCursor
createColorCursor.restype  = POINTER(Cursor)
createColorCursor.argtypes = [POINTER(Surface), c_int, c_int]

SystemCursor = c_int

createSystemCursor = lib.SDL_CreateSystemCursor
createSystemCursor.restype  = POINTER(Cursor)
createSystemCursor.argtypes = [SystemCursor]

setCursor = lib.SDL_SetCursor
setCursor.restype  = None
setCursor.argtypes = [POINTER(Cursor)]

getCursor = lib.SDL_GetCursor
getCursor.restype  = POINTER(Cursor)
getCursor.argtypes = []

getDefaultCursor = lib.SDL_GetDefaultCursor
getDefaultCursor.restype  = POINTER(Cursor)
getDefaultCursor.argtypes = []

freeCursor = lib.SDL_FreeCursor
freeCursor.restype  = None
freeCursor.argtypes = [POINTER(Cursor)]

showCursor = lib.SDL_ShowCursor
showCursor.restype  = c_int
showCursor.argtypes = [c_int]

numJoysticks = lib.SDL_NumJoysticks
numJoysticks.restype  = c_int
numJoysticks.argtypes = []

joystickNameForIndex = lib.SDL_JoystickNameForIndex
joystickNameForIndex.restype  = c_char_p
joystickNameForIndex.argtypes = [c_int]

class Joystick(Structure):
    _fields_ = [
        
    ]

joystickOpen = lib.SDL_JoystickOpen
joystickOpen.restype  = POINTER(Joystick)
joystickOpen.argtypes = [c_int]

joystickName = lib.SDL_JoystickName
joystickName.restype  = c_char_p
joystickName.argtypes = [POINTER(Joystick)]

class JoystickGUID(Structure):
    _fields_ = [
        ('data', (Uint8*16))
    ]

joystickGetDeviceGUID = lib.SDL_JoystickGetDeviceGUID
joystickGetDeviceGUID.restype  = JoystickGUID
joystickGetDeviceGUID.argtypes = [c_int]

joystickGetGUID = lib.SDL_JoystickGetGUID
joystickGetGUID.restype  = JoystickGUID
joystickGetGUID.argtypes = [POINTER(Joystick)]

joystickGetGUIDString = lib.SDL_JoystickGetGUIDString
joystickGetGUIDString.restype  = None
joystickGetGUIDString.argtypes = [JoystickGUID, c_char_p, c_int]

joystickGetGUIDFromString = lib.SDL_JoystickGetGUIDFromString
joystickGetGUIDFromString.restype  = JoystickGUID
joystickGetGUIDFromString.argtypes = [c_char_p]

joystickGetAttached = lib.SDL_JoystickGetAttached
joystickGetAttached.restype  = bool
joystickGetAttached.argtypes = [POINTER(Joystick)]

JoystickID = c_int

joystickInstanceID = lib.SDL_JoystickInstanceID
joystickInstanceID.restype  = JoystickID
joystickInstanceID.argtypes = [POINTER(Joystick)]

joystickNumAxes = lib.SDL_JoystickNumAxes
joystickNumAxes.restype  = c_int
joystickNumAxes.argtypes = [POINTER(Joystick)]

joystickNumBalls = lib.SDL_JoystickNumBalls
joystickNumBalls.restype  = c_int
joystickNumBalls.argtypes = [POINTER(Joystick)]

joystickNumHats = lib.SDL_JoystickNumHats
joystickNumHats.restype  = c_int
joystickNumHats.argtypes = [POINTER(Joystick)]

joystickNumButtons = lib.SDL_JoystickNumButtons
joystickNumButtons.restype  = c_int
joystickNumButtons.argtypes = [POINTER(Joystick)]

joystickUpdate = lib.SDL_JoystickUpdate
joystickUpdate.restype  = None
joystickUpdate.argtypes = []

joystickEventState = lib.SDL_JoystickEventState
joystickEventState.restype  = c_int
joystickEventState.argtypes = [c_int]

Sint16 = c_short

joystickGetAxis = lib.SDL_JoystickGetAxis
joystickGetAxis.restype  = Sint16
joystickGetAxis.argtypes = [POINTER(Joystick), c_int]

joystickGetHat = lib.SDL_JoystickGetHat
joystickGetHat.restype  = Uint8
joystickGetHat.argtypes = [POINTER(Joystick), c_int]

joystickGetBall = lib.SDL_JoystickGetBall
joystickGetBall.restype  = c_int
joystickGetBall.argtypes = [POINTER(Joystick), c_int, POINTER(c_int), POINTER(c_int)]

joystickGetButton = lib.SDL_JoystickGetButton
joystickGetButton.restype  = Uint8
joystickGetButton.argtypes = [POINTER(Joystick), c_int]

joystickClose = lib.SDL_JoystickClose
joystickClose.restype  = None
joystickClose.argtypes = [POINTER(Joystick)]
CONTROLLER_BINDTYPE_NONE = 0
CONTROLLER_BINDTYPE_BUTTON = 1
CONTROLLER_BINDTYPE_AXIS = 2
CONTROLLER_BINDTYPE_HAT = 3

gameControllerAddMapping = lib.SDL_GameControllerAddMapping
gameControllerAddMapping.restype  = c_int
gameControllerAddMapping.argtypes = [c_char_p]

gameControllerMappingForGUID = lib.SDL_GameControllerMappingForGUID
gameControllerMappingForGUID.restype  = c_char_p
gameControllerMappingForGUID.argtypes = [JoystickGUID]

class GameController(Structure):
    _fields_ = [
        
    ]

gameControllerMapping = lib.SDL_GameControllerMapping
gameControllerMapping.restype  = c_char_p
gameControllerMapping.argtypes = [POINTER(GameController)]

isGameController = lib.SDL_IsGameController
isGameController.restype  = bool
isGameController.argtypes = [c_int]

gameControllerNameForIndex = lib.SDL_GameControllerNameForIndex
gameControllerNameForIndex.restype  = c_char_p
gameControllerNameForIndex.argtypes = [c_int]

gameControllerOpen = lib.SDL_GameControllerOpen
gameControllerOpen.restype  = POINTER(GameController)
gameControllerOpen.argtypes = [c_int]

gameControllerName = lib.SDL_GameControllerName
gameControllerName.restype  = c_char_p
gameControllerName.argtypes = [POINTER(GameController)]

gameControllerGetAttached = lib.SDL_GameControllerGetAttached
gameControllerGetAttached.restype  = bool
gameControllerGetAttached.argtypes = [POINTER(GameController)]

gameControllerGetJoystick = lib.SDL_GameControllerGetJoystick
gameControllerGetJoystick.restype  = POINTER(Joystick)
gameControllerGetJoystick.argtypes = [POINTER(GameController)]

gameControllerEventState = lib.SDL_GameControllerEventState
gameControllerEventState.restype  = c_int
gameControllerEventState.argtypes = [c_int]

gameControllerUpdate = lib.SDL_GameControllerUpdate
gameControllerUpdate.restype  = None
gameControllerUpdate.argtypes = []
CONTROLLER_AXIS_INVALID = -1
CONTROLLER_AXIS_LEFTX = 0
CONTROLLER_AXIS_LEFTY = 1
CONTROLLER_AXIS_RIGHTX = 2
CONTROLLER_AXIS_RIGHTY = 3
CONTROLLER_AXIS_TRIGGERLEFT = 4
CONTROLLER_AXIS_TRIGGERRIGHT = 5
CONTROLLER_AXIS_MAX = 6

GameControllerAxis = c_int

gameControllerGetAxisFromString = lib.SDL_GameControllerGetAxisFromString
gameControllerGetAxisFromString.restype  = GameControllerAxis
gameControllerGetAxisFromString.argtypes = [c_char_p]

gameControllerGetStringForAxis = lib.SDL_GameControllerGetStringForAxis
gameControllerGetStringForAxis.restype  = c_char_p
gameControllerGetStringForAxis.argtypes = [GameControllerAxis]

GameControllerBindType = c_int

class GameControllerButtonBind_value_hat(Structure):
    _fields_ = [
        ('hat', c_int),
        ('hat_mask', c_int)
    ]

class GameControllerButtonBind_value(Union):
    _fields_ = [
        ('button', c_int),
        ('axis', c_int),
        ('hat', GameControllerButtonBind_value_hat)
    ]

class GameControllerButtonBind(Structure):
    _fields_ = [
        ('bindType', GameControllerBindType),
        ('value', GameControllerButtonBind_value)
    ]

gameControllerGetBindForAxis = lib.SDL_GameControllerGetBindForAxis
gameControllerGetBindForAxis.restype  = GameControllerButtonBind
gameControllerGetBindForAxis.argtypes = [POINTER(GameController), GameControllerAxis]

gameControllerGetAxis = lib.SDL_GameControllerGetAxis
gameControllerGetAxis.restype  = Sint16
gameControllerGetAxis.argtypes = [POINTER(GameController), GameControllerAxis]
CONTROLLER_BUTTON_INVALID = -1
CONTROLLER_BUTTON_A = 0
CONTROLLER_BUTTON_B = 1
CONTROLLER_BUTTON_X = 2
CONTROLLER_BUTTON_Y = 3
CONTROLLER_BUTTON_BACK = 4
CONTROLLER_BUTTON_GUIDE = 5
CONTROLLER_BUTTON_START = 6
CONTROLLER_BUTTON_LEFTSTICK = 7
CONTROLLER_BUTTON_RIGHTSTICK = 8
CONTROLLER_BUTTON_LEFTSHOULDER = 9
CONTROLLER_BUTTON_RIGHTSHOULDER = 10
CONTROLLER_BUTTON_DPAD_UP = 11
CONTROLLER_BUTTON_DPAD_DOWN = 12
CONTROLLER_BUTTON_DPAD_LEFT = 13
CONTROLLER_BUTTON_DPAD_RIGHT = 14
CONTROLLER_BUTTON_MAX = 15

GameControllerButton = c_int

gameControllerGetButtonFromString = lib.SDL_GameControllerGetButtonFromString
gameControllerGetButtonFromString.restype  = GameControllerButton
gameControllerGetButtonFromString.argtypes = [c_char_p]

gameControllerGetStringForButton = lib.SDL_GameControllerGetStringForButton
gameControllerGetStringForButton.restype  = c_char_p
gameControllerGetStringForButton.argtypes = [GameControllerButton]

gameControllerGetBindForButton = lib.SDL_GameControllerGetBindForButton
gameControllerGetBindForButton.restype  = GameControllerButtonBind
gameControllerGetBindForButton.argtypes = [POINTER(GameController), GameControllerButton]

gameControllerGetButton = lib.SDL_GameControllerGetButton
gameControllerGetButton.restype  = Uint8
gameControllerGetButton.argtypes = [POINTER(GameController), GameControllerButton]

gameControllerClose = lib.SDL_GameControllerClose
gameControllerClose.restype  = None
gameControllerClose.argtypes = [POINTER(GameController)]

getNumTouchDevices = lib.SDL_GetNumTouchDevices
getNumTouchDevices.restype  = c_int
getNumTouchDevices.argtypes = []

TouchID = c_long

getTouchDevice = lib.SDL_GetTouchDevice
getTouchDevice.restype  = TouchID
getTouchDevice.argtypes = [c_int]

getNumTouchFingers = lib.SDL_GetNumTouchFingers
getNumTouchFingers.restype  = c_int
getNumTouchFingers.argtypes = [TouchID]

FingerID = c_long

class Finger(Structure):
    _fields_ = [
        ('id', FingerID),
        ('x', c_float),
        ('y', c_float),
        ('pressure', c_float)
    ]

getTouchFinger = lib.SDL_GetTouchFinger
getTouchFinger.restype  = POINTER(Finger)
getTouchFinger.argtypes = [TouchID, c_int]

recordGesture = lib.SDL_RecordGesture
recordGesture.restype  = c_int
recordGesture.argtypes = [TouchID]

saveAllDollarTemplates = lib.SDL_SaveAllDollarTemplates
saveAllDollarTemplates.restype  = c_int
saveAllDollarTemplates.argtypes = [POINTER(RWops)]

GestureID = c_long

saveDollarTemplate = lib.SDL_SaveDollarTemplate
saveDollarTemplate.restype  = c_int
saveDollarTemplate.argtypes = [GestureID, POINTER(RWops)]

loadDollarTemplates = lib.SDL_LoadDollarTemplates
loadDollarTemplates.restype  = c_int
loadDollarTemplates.argtypes = [TouchID, POINTER(RWops)]
FIRSTEVENT = 0
QUIT = 1
APP_TERMINATING = 2
APP_LOWMEMORY = 3
APP_WILLENTERBACKGROUND = 4
APP_DIDENTERBACKGROUND = 5
APP_WILLENTERFOREGROUND = 6
APP_DIDENTERFOREGROUND = 7
WINDOWEVENT = 8
SYSWMEVENT = 9
KEYDOWN = 10
KEYUP = 11
TEXTEDITING = 12
TEXTINPUT = 13
MOUSEMOTION = 14
MOUSEBUTTONDOWN = 15
MOUSEBUTTONUP = 16
MOUSEWHEEL = 17
JOYAXISMOTION = 18
JOYBALLMOTION = 19
JOYHATMOTION = 20
JOYBUTTONDOWN = 21
JOYBUTTONUP = 22
JOYDEVICEADDED = 23
JOYDEVICEREMOVED = 24
CONTROLLERAXISMOTION = 25
CONTROLLERBUTTONDOWN = 26
CONTROLLERBUTTONUP = 27
CONTROLLERDEVICEADDED = 28
CONTROLLERDEVICEREMOVED = 29
CONTROLLERDEVICEREMAPPED = 30
FINGERDOWN = 31
FINGERUP = 32
FINGERMOTION = 33
DOLLARGESTURE = 34
DOLLARRECORD = 35
MULTIGESTURE = 36
CLIPBOARDUPDATE = 37
DROPFILE = 38
USEREVENT = 39
LASTEVENT = 40

pumpEvents = lib.SDL_PumpEvents
pumpEvents.restype  = None
pumpEvents.argtypes = []
ADDEVENT = 0
PEEKEVENT = 1
GETEVENT = 2

class CommonEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32)
    ]

Sint32 = c_int

class WindowEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('windowID', Uint32),
        ('event', Uint8),
        ('padding1', Uint8),
        ('padding2', Uint8),
        ('padding3', Uint8),
        ('data1', Sint32),
        ('data2', Sint32)
    ]

class Keysym(Structure):
    _fields_ = [
        ('scancode', Scancode),
        ('sym', Keycode),
        ('mod', Uint16),
        ('unused', Uint32)
    ]

class KeyboardEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('windowID', Uint32),
        ('state', Uint8),
        ('repeat', Uint8),
        ('padding2', Uint8),
        ('padding3', Uint8),
        ('keysym', Keysym)
    ]

class TextEditingEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('windowID', Uint32),
        ('text', (c_char*32)),
        ('start', Sint32),
        ('length', Sint32)
    ]

class TextInputEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('windowID', Uint32),
        ('text', (c_char*32))
    ]

class MouseMotionEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('windowID', Uint32),
        ('which', Uint32),
        ('state', Uint32),
        ('x', Sint32),
        ('y', Sint32),
        ('xrel', Sint32),
        ('yrel', Sint32)
    ]

class MouseButtonEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('windowID', Uint32),
        ('which', Uint32),
        ('button', Uint8),
        ('state', Uint8),
        ('padding1', Uint8),
        ('padding2', Uint8),
        ('x', Sint32),
        ('y', Sint32)
    ]

class MouseWheelEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('windowID', Uint32),
        ('which', Uint32),
        ('x', Sint32),
        ('y', Sint32)
    ]

class JoyAxisEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('which', JoystickID),
        ('axis', Uint8),
        ('padding1', Uint8),
        ('padding2', Uint8),
        ('padding3', Uint8),
        ('value', Sint16),
        ('padding4', Uint16)
    ]

class JoyBallEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('which', JoystickID),
        ('ball', Uint8),
        ('padding1', Uint8),
        ('padding2', Uint8),
        ('padding3', Uint8),
        ('xrel', Sint16),
        ('yrel', Sint16)
    ]

class JoyHatEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('which', JoystickID),
        ('hat', Uint8),
        ('value', Uint8),
        ('padding1', Uint8),
        ('padding2', Uint8)
    ]

class JoyButtonEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('which', JoystickID),
        ('button', Uint8),
        ('state', Uint8),
        ('padding1', Uint8),
        ('padding2', Uint8)
    ]

class JoyDeviceEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('which', Sint32)
    ]

class ControllerAxisEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('which', JoystickID),
        ('axis', Uint8),
        ('padding1', Uint8),
        ('padding2', Uint8),
        ('padding3', Uint8),
        ('value', Sint16),
        ('padding4', Uint16)
    ]

class ControllerButtonEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('which', JoystickID),
        ('button', Uint8),
        ('state', Uint8),
        ('padding1', Uint8),
        ('padding2', Uint8)
    ]

class ControllerDeviceEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('which', Sint32)
    ]

class QuitEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32)
    ]

class UserEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('windowID', Uint32),
        ('code', Sint32),
        ('data1', c_void_p),
        ('data2', c_void_p)
    ]

class SysWMmsg(Structure):
    _fields_ = [
        
    ]

class SysWMEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('msg', POINTER(SysWMmsg))
    ]

class TouchFingerEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('touchId', TouchID),
        ('fingerId', FingerID),
        ('x', c_float),
        ('y', c_float),
        ('dx', c_float),
        ('dy', c_float),
        ('pressure', c_float)
    ]

class MultiGestureEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('touchId', TouchID),
        ('dTheta', c_float),
        ('dDist', c_float),
        ('x', c_float),
        ('y', c_float),
        ('numFingers', Uint16),
        ('padding', Uint16)
    ]

class DollarGestureEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('touchId', TouchID),
        ('gestureId', GestureID),
        ('numFingers', Uint32),
        ('error', c_float),
        ('x', c_float),
        ('y', c_float)
    ]

class DropEvent(Structure):
    _fields_ = [
        ('type', Uint32),
        ('timestamp', Uint32),
        ('file', c_char_p)
    ]

class Event(Union):
    _fields_ = [
        ('type', Uint32),
        ('common', CommonEvent),
        ('window', WindowEvent),
        ('key', KeyboardEvent),
        ('edit', TextEditingEvent),
        ('text', TextInputEvent),
        ('motion', MouseMotionEvent),
        ('button', MouseButtonEvent),
        ('wheel', MouseWheelEvent),
        ('jaxis', JoyAxisEvent),
        ('jball', JoyBallEvent),
        ('jhat', JoyHatEvent),
        ('jbutton', JoyButtonEvent),
        ('jdevice', JoyDeviceEvent),
        ('caxis', ControllerAxisEvent),
        ('cbutton', ControllerButtonEvent),
        ('cdevice', ControllerDeviceEvent),
        ('quit', QuitEvent),
        ('user', UserEvent),
        ('syswm', SysWMEvent),
        ('tfinger', TouchFingerEvent),
        ('mgesture', MultiGestureEvent),
        ('dgesture', DollarGestureEvent),
        ('drop', DropEvent),
        ('padding', (Uint8*56))
    ]

eventaction = c_int

peepEvents = lib.SDL_PeepEvents
peepEvents.restype  = c_int
peepEvents.argtypes = [POINTER(Event), c_int, eventaction, Uint32, Uint32]

hasEvent = lib.SDL_HasEvent
hasEvent.restype  = bool
hasEvent.argtypes = [Uint32]

hasEvents = lib.SDL_HasEvents
hasEvents.restype  = bool
hasEvents.argtypes = [Uint32, Uint32]

flushEvent = lib.SDL_FlushEvent
flushEvent.restype  = None
flushEvent.argtypes = [Uint32]

flushEvents = lib.SDL_FlushEvents
flushEvents.restype  = None
flushEvents.argtypes = [Uint32, Uint32]

pollEvent = lib.SDL_PollEvent
pollEvent.restype  = c_int
pollEvent.argtypes = [POINTER(Event)]

waitEvent = lib.SDL_WaitEvent
waitEvent.restype  = c_int
waitEvent.argtypes = [POINTER(Event)]

waitEventTimeout = lib.SDL_WaitEventTimeout
waitEventTimeout.restype  = c_int
waitEventTimeout.argtypes = [POINTER(Event), c_int]

pushEvent = lib.SDL_PushEvent
pushEvent.restype  = c_int
pushEvent.argtypes = [POINTER(Event)]

class Event(Union):
    _fields_ = [
        ('type', Uint32),
        ('common', CommonEvent),
        ('window', WindowEvent),
        ('key', KeyboardEvent),
        ('edit', TextEditingEvent),
        ('text', TextInputEvent),
        ('motion', MouseMotionEvent),
        ('button', MouseButtonEvent),
        ('wheel', MouseWheelEvent),
        ('jaxis', JoyAxisEvent),
        ('jball', JoyBallEvent),
        ('jhat', JoyHatEvent),
        ('jbutton', JoyButtonEvent),
        ('jdevice', JoyDeviceEvent),
        ('caxis', ControllerAxisEvent),
        ('cbutton', ControllerButtonEvent),
        ('cdevice', ControllerDeviceEvent),
        ('quit', QuitEvent),
        ('user', UserEvent),
        ('syswm', SysWMEvent),
        ('tfinger', TouchFingerEvent),
        ('mgesture', MultiGestureEvent),
        ('dgesture', DollarGestureEvent),
        ('drop', DropEvent),
        ('padding', (Uint8*56))
    ]

EventFilter = CFUNCTYPE(c_int, c_void_p, POINTER(Event))

setEventFilter = lib.SDL_SetEventFilter
setEventFilter.restype  = None
setEventFilter.argtypes = [EventFilter, c_void_p]

getEventFilter = lib.SDL_GetEventFilter
getEventFilter.restype  = bool
getEventFilter.argtypes = [POINTER(EventFilter), POINTER(c_void_p)]

addEventWatch = lib.SDL_AddEventWatch
addEventWatch.restype  = None
addEventWatch.argtypes = [EventFilter, c_void_p]

delEventWatch = lib.SDL_DelEventWatch
delEventWatch.restype  = None
delEventWatch.argtypes = [EventFilter, c_void_p]

filterEvents = lib.SDL_FilterEvents
filterEvents.restype  = None
filterEvents.argtypes = [EventFilter, c_void_p]

eventState = lib.SDL_EventState
eventState.restype  = Uint8
eventState.argtypes = [Uint32, c_int]

registerEvents = lib.SDL_RegisterEvents
registerEvents.restype  = Uint32
registerEvents.argtypes = [c_int]

numHaptics = lib.SDL_NumHaptics
numHaptics.restype  = c_int
numHaptics.argtypes = []

hapticName = lib.SDL_HapticName
hapticName.restype  = c_char_p
hapticName.argtypes = [c_int]

class Haptic(Structure):
    _fields_ = [
        
    ]

hapticOpen = lib.SDL_HapticOpen
hapticOpen.restype  = POINTER(Haptic)
hapticOpen.argtypes = [c_int]

hapticOpened = lib.SDL_HapticOpened
hapticOpened.restype  = c_int
hapticOpened.argtypes = [c_int]

hapticIndex = lib.SDL_HapticIndex
hapticIndex.restype  = c_int
hapticIndex.argtypes = [POINTER(Haptic)]

mouseIsHaptic = lib.SDL_MouseIsHaptic
mouseIsHaptic.restype  = c_int
mouseIsHaptic.argtypes = []

hapticOpenFromMouse = lib.SDL_HapticOpenFromMouse
hapticOpenFromMouse.restype  = POINTER(Haptic)
hapticOpenFromMouse.argtypes = []

joystickIsHaptic = lib.SDL_JoystickIsHaptic
joystickIsHaptic.restype  = c_int
joystickIsHaptic.argtypes = [POINTER(Joystick)]

hapticOpenFromJoystick = lib.SDL_HapticOpenFromJoystick
hapticOpenFromJoystick.restype  = POINTER(Haptic)
hapticOpenFromJoystick.argtypes = [POINTER(Joystick)]

hapticClose = lib.SDL_HapticClose
hapticClose.restype  = None
hapticClose.argtypes = [POINTER(Haptic)]

hapticNumEffects = lib.SDL_HapticNumEffects
hapticNumEffects.restype  = c_int
hapticNumEffects.argtypes = [POINTER(Haptic)]

hapticNumEffectsPlaying = lib.SDL_HapticNumEffectsPlaying
hapticNumEffectsPlaying.restype  = c_int
hapticNumEffectsPlaying.argtypes = [POINTER(Haptic)]

hapticQuery = lib.SDL_HapticQuery
hapticQuery.restype  = c_uint
hapticQuery.argtypes = [POINTER(Haptic)]

hapticNumAxes = lib.SDL_HapticNumAxes
hapticNumAxes.restype  = c_int
hapticNumAxes.argtypes = [POINTER(Haptic)]

class HapticDirection(Structure):
    _fields_ = [
        ('type', Uint8),
        ('dir', (Sint32*3))
    ]

class HapticConstant(Structure):
    _fields_ = [
        ('type', Uint16),
        ('direction', HapticDirection),
        ('length', Uint32),
        ('delay', Uint16),
        ('button', Uint16),
        ('interval', Uint16),
        ('level', Sint16),
        ('attack_length', Uint16),
        ('attack_level', Uint16),
        ('fade_length', Uint16),
        ('fade_level', Uint16)
    ]

class HapticPeriodic(Structure):
    _fields_ = [
        ('type', Uint16),
        ('direction', HapticDirection),
        ('length', Uint32),
        ('delay', Uint16),
        ('button', Uint16),
        ('interval', Uint16),
        ('period', Uint16),
        ('magnitude', Sint16),
        ('offset', Sint16),
        ('phase', Uint16),
        ('attack_length', Uint16),
        ('attack_level', Uint16),
        ('fade_length', Uint16),
        ('fade_level', Uint16)
    ]

class HapticCondition(Structure):
    _fields_ = [
        ('type', Uint16),
        ('direction', HapticDirection),
        ('length', Uint32),
        ('delay', Uint16),
        ('button', Uint16),
        ('interval', Uint16),
        ('right_sat', (Uint16*3)),
        ('left_sat', (Uint16*3)),
        ('right_coeff', (Sint16*3)),
        ('left_coeff', (Sint16*3)),
        ('deadband', (Uint16*3)),
        ('center', (Sint16*3))
    ]

class HapticRamp(Structure):
    _fields_ = [
        ('type', Uint16),
        ('direction', HapticDirection),
        ('length', Uint32),
        ('delay', Uint16),
        ('button', Uint16),
        ('interval', Uint16),
        ('start', Sint16),
        ('end', Sint16),
        ('attack_length', Uint16),
        ('attack_level', Uint16),
        ('fade_length', Uint16),
        ('fade_level', Uint16)
    ]

class HapticLeftRight(Structure):
    _fields_ = [
        ('type', Uint16),
        ('length', Uint32),
        ('large_magnitude', Uint16),
        ('small_magnitude', Uint16)
    ]

class HapticCustom(Structure):
    _fields_ = [
        ('type', Uint16),
        ('direction', HapticDirection),
        ('length', Uint32),
        ('delay', Uint16),
        ('button', Uint16),
        ('interval', Uint16),
        ('channels', Uint8),
        ('period', Uint16),
        ('samples', Uint16),
        ('data', POINTER(Uint16)),
        ('attack_length', Uint16),
        ('attack_level', Uint16),
        ('fade_length', Uint16),
        ('fade_level', Uint16)
    ]

class HapticEffect(Union):
    _fields_ = [
        ('type', Uint16),
        ('constant', HapticConstant),
        ('periodic', HapticPeriodic),
        ('condition', HapticCondition),
        ('ramp', HapticRamp),
        ('leftright', HapticLeftRight),
        ('custom', HapticCustom)
    ]

hapticEffectSupported = lib.SDL_HapticEffectSupported
hapticEffectSupported.restype  = c_int
hapticEffectSupported.argtypes = [POINTER(Haptic), POINTER(HapticEffect)]

hapticNewEffect = lib.SDL_HapticNewEffect
hapticNewEffect.restype  = c_int
hapticNewEffect.argtypes = [POINTER(Haptic), POINTER(HapticEffect)]

hapticUpdateEffect = lib.SDL_HapticUpdateEffect
hapticUpdateEffect.restype  = c_int
hapticUpdateEffect.argtypes = [POINTER(Haptic), c_int, POINTER(HapticEffect)]

hapticRunEffect = lib.SDL_HapticRunEffect
hapticRunEffect.restype  = c_int
hapticRunEffect.argtypes = [POINTER(Haptic), c_int, Uint32]

hapticStopEffect = lib.SDL_HapticStopEffect
hapticStopEffect.restype  = c_int
hapticStopEffect.argtypes = [POINTER(Haptic), c_int]

hapticDestroyEffect = lib.SDL_HapticDestroyEffect
hapticDestroyEffect.restype  = None
hapticDestroyEffect.argtypes = [POINTER(Haptic), c_int]

hapticGetEffectStatus = lib.SDL_HapticGetEffectStatus
hapticGetEffectStatus.restype  = c_int
hapticGetEffectStatus.argtypes = [POINTER(Haptic), c_int]

hapticSetGain = lib.SDL_HapticSetGain
hapticSetGain.restype  = c_int
hapticSetGain.argtypes = [POINTER(Haptic), c_int]

hapticSetAutocenter = lib.SDL_HapticSetAutocenter
hapticSetAutocenter.restype  = c_int
hapticSetAutocenter.argtypes = [POINTER(Haptic), c_int]

hapticPause = lib.SDL_HapticPause
hapticPause.restype  = c_int
hapticPause.argtypes = [POINTER(Haptic)]

hapticUnpause = lib.SDL_HapticUnpause
hapticUnpause.restype  = c_int
hapticUnpause.argtypes = [POINTER(Haptic)]

hapticStopAll = lib.SDL_HapticStopAll
hapticStopAll.restype  = c_int
hapticStopAll.argtypes = [POINTER(Haptic)]

hapticRumbleSupported = lib.SDL_HapticRumbleSupported
hapticRumbleSupported.restype  = c_int
hapticRumbleSupported.argtypes = [POINTER(Haptic)]

hapticRumbleInit = lib.SDL_HapticRumbleInit
hapticRumbleInit.restype  = c_int
hapticRumbleInit.argtypes = [POINTER(Haptic)]

hapticRumblePlay = lib.SDL_HapticRumblePlay
hapticRumblePlay.restype  = c_int
hapticRumblePlay.argtypes = [POINTER(Haptic), c_float, Uint32]

hapticRumbleStop = lib.SDL_HapticRumbleStop
hapticRumbleStop.restype  = c_int
hapticRumbleStop.argtypes = [POINTER(Haptic)]
HINT_DEFAULT = 0
HINT_NORMAL = 1
HINT_OVERRIDE = 2

HintPriority = c_int

setHintWithPriority = lib.SDL_SetHintWithPriority
setHintWithPriority.restype  = bool
setHintWithPriority.argtypes = [c_char_p, c_char_p, HintPriority]

setHint = lib.SDL_SetHint
setHint.restype  = bool
setHint.argtypes = [c_char_p, c_char_p]

getHint = lib.SDL_GetHint
getHint.restype  = c_char_p
getHint.argtypes = [c_char_p]

HintCallback = CFUNCTYPE(None, c_void_p, c_char_p, c_char_p, c_char_p)

addHintCallback = lib.SDL_AddHintCallback
addHintCallback.restype  = None
addHintCallback.argtypes = [c_char_p, HintCallback, c_void_p]

delHintCallback = lib.SDL_DelHintCallback
delHintCallback.restype  = None
delHintCallback.argtypes = [c_char_p, HintCallback, c_void_p]

clearHints = lib.SDL_ClearHints
clearHints.restype  = None
clearHints.argtypes = []

loadObject = lib.SDL_LoadObject
loadObject.restype  = c_void_p
loadObject.argtypes = [c_char_p]

loadFunction = lib.SDL_LoadFunction
loadFunction.restype  = c_void_p
loadFunction.argtypes = [c_void_p, c_char_p]

unloadObject = lib.SDL_UnloadObject
unloadObject.restype  = None
unloadObject.argtypes = [c_void_p]
LOG_CATEGORY_APPLICATION = 0
LOG_CATEGORY_ERROR = 1
LOG_CATEGORY_ASSERT = 2
LOG_CATEGORY_SYSTEM = 3
LOG_CATEGORY_AUDIO = 4
LOG_CATEGORY_VIDEO = 5
LOG_CATEGORY_RENDER = 6
LOG_CATEGORY_INPUT = 7
LOG_CATEGORY_TEST = 8
LOG_CATEGORY_RESERVED1 = 9
LOG_CATEGORY_RESERVED2 = 10
LOG_CATEGORY_RESERVED3 = 11
LOG_CATEGORY_RESERVED4 = 12
LOG_CATEGORY_RESERVED5 = 13
LOG_CATEGORY_RESERVED6 = 14
LOG_CATEGORY_RESERVED7 = 15
LOG_CATEGORY_RESERVED8 = 16
LOG_CATEGORY_RESERVED9 = 17
LOG_CATEGORY_RESERVED10 = 18
LOG_CATEGORY_CUSTOM = 19
LOG_PRIORITY_VERBOSE = 0
LOG_PRIORITY_DEBUG = 1
LOG_PRIORITY_INFO = 2
LOG_PRIORITY_WARN = 3
LOG_PRIORITY_ERROR = 4
LOG_PRIORITY_CRITICAL = 5
NUM_LOG_PRIORITIES = 6

LogPriority = c_int

logSetAllPriority = lib.SDL_LogSetAllPriority
logSetAllPriority.restype  = None
logSetAllPriority.argtypes = [LogPriority]

logSetPriority = lib.SDL_LogSetPriority
logSetPriority.restype  = None
logSetPriority.argtypes = [c_int, LogPriority]

logGetPriority = lib.SDL_LogGetPriority
logGetPriority.restype  = LogPriority
logGetPriority.argtypes = [c_int]

logResetPriorities = lib.SDL_LogResetPriorities
logResetPriorities.restype  = None
logResetPriorities.argtypes = []

log = lib.SDL_Log
log.restype  = None
log.argtypes = [c_char_p]

logVerbose = lib.SDL_LogVerbose
logVerbose.restype  = None
logVerbose.argtypes = [c_int, c_char_p]

logDebug = lib.SDL_LogDebug
logDebug.restype  = None
logDebug.argtypes = [c_int, c_char_p]

logInfo = lib.SDL_LogInfo
logInfo.restype  = None
logInfo.argtypes = [c_int, c_char_p]

logWarn = lib.SDL_LogWarn
logWarn.restype  = None
logWarn.argtypes = [c_int, c_char_p]

logError = lib.SDL_LogError
logError.restype  = None
logError.argtypes = [c_int, c_char_p]

logCritical = lib.SDL_LogCritical
logCritical.restype  = None
logCritical.argtypes = [c_int, c_char_p]

logMessage = lib.SDL_LogMessage
logMessage.restype  = None
logMessage.argtypes = [c_int, LogPriority, c_char_p]

class __va_list_tag(Structure):
    _fields_ = [
        ('gp_offset', c_uint),
        ('fp_offset', c_uint),
        ('overflow_arg_area', c_void_p),
        ('reg_save_area', c_void_p)
    ]

logMessageV = lib.SDL_LogMessageV
logMessageV.restype  = None
logMessageV.argtypes = [c_int, LogPriority, c_char_p, POINTER(__va_list_tag)]

LogOutputFunction = CFUNCTYPE(None, c_void_p, c_int, c_int, c_char_p)

logGetOutputFunction = lib.SDL_LogGetOutputFunction
logGetOutputFunction.restype  = None
logGetOutputFunction.argtypes = [POINTER(LogOutputFunction), POINTER(c_void_p)]

logSetOutputFunction = lib.SDL_LogSetOutputFunction
logSetOutputFunction.restype  = None
logSetOutputFunction.argtypes = [LogOutputFunction, c_void_p]
MESSAGEBOX_ERROR = 0
MESSAGEBOX_WARNING = 1
MESSAGEBOX_INFORMATION = 2
MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 0
MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 1
MESSAGEBOX_COLOR_BACKGROUND = 0
MESSAGEBOX_COLOR_TEXT = 1
MESSAGEBOX_COLOR_BUTTON_BORDER = 2
MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3
MESSAGEBOX_COLOR_BUTTON_SELECTED = 4
MESSAGEBOX_COLOR_MAX = 5

class MessageBoxButtonData(Structure):
    _fields_ = [
        ('flags', Uint32),
        ('buttonid', c_int),
        ('text', c_char_p)
    ]

class MessageBoxColor(Structure):
    _fields_ = [
        ('r', Uint8),
        ('g', Uint8),
        ('b', Uint8)
    ]

class MessageBoxColorScheme(Structure):
    _fields_ = [
        ('colors', (MessageBoxColor*5))
    ]

class MessageBoxData(Structure):
    _fields_ = [
        ('flags', Uint32),
        ('window', POINTER(Window)),
        ('title', c_char_p),
        ('message', c_char_p),
        ('numbuttons', c_int),
        ('buttons', POINTER(MessageBoxButtonData)),
        ('colorScheme', POINTER(MessageBoxColorScheme))
    ]

showMessageBox = lib.SDL_ShowMessageBox
showMessageBox.restype  = c_int
showMessageBox.argtypes = [POINTER(MessageBoxData), POINTER(c_int)]

showSimpleMessageBox = lib.SDL_ShowSimpleMessageBox
showSimpleMessageBox.restype  = c_int
showSimpleMessageBox.argtypes = [Uint32, c_char_p, c_char_p, POINTER(Window)]
POWERSTATE_UNKNOWN = 0
POWERSTATE_ON_BATTERY = 1
POWERSTATE_NO_BATTERY = 2
POWERSTATE_CHARGING = 3
POWERSTATE_CHARGED = 4

PowerState = c_int

getPowerInfo = lib.SDL_GetPowerInfo
getPowerInfo.restype  = PowerState
getPowerInfo.argtypes = [POINTER(c_int), POINTER(c_int)]
RENDERER_SOFTWARE = 0
RENDERER_ACCELERATED = 1
RENDERER_PRESENTVSYNC = 2
RENDERER_TARGETTEXTURE = 3
TEXTUREACCESS_STATIC = 0
TEXTUREACCESS_STREAMING = 1
TEXTUREACCESS_TARGET = 2
TEXTUREMODULATE_NONE = 0
TEXTUREMODULATE_COLOR = 1
TEXTUREMODULATE_ALPHA = 2
FLIP_NONE = 0
FLIP_HORIZONTAL = 1
FLIP_VERTICAL = 2

getNumRenderDrivers = lib.SDL_GetNumRenderDrivers
getNumRenderDrivers.restype  = c_int
getNumRenderDrivers.argtypes = []

class RendererInfo(Structure):
    _fields_ = [
        ('name', c_char_p),
        ('flags', Uint32),
        ('num_texture_formats', Uint32),
        ('texture_formats', (Uint32*16)),
        ('max_texture_width', c_int),
        ('max_texture_height', c_int)
    ]

getRenderDriverInfo = lib.SDL_GetRenderDriverInfo
getRenderDriverInfo.restype  = c_int
getRenderDriverInfo.argtypes = [c_int, POINTER(RendererInfo)]

class Renderer(Structure):
    _fields_ = [
        
    ]

createWindowAndRenderer = lib.SDL_CreateWindowAndRenderer
createWindowAndRenderer.restype  = c_int
createWindowAndRenderer.argtypes = [c_int, c_int, Uint32, POINTER(POINTER(Window)), POINTER(POINTER(Renderer))]

createRenderer = lib.SDL_CreateRenderer
createRenderer.restype  = POINTER(Renderer)
createRenderer.argtypes = [POINTER(Window), c_int, Uint32]

createSoftwareRenderer = lib.SDL_CreateSoftwareRenderer
createSoftwareRenderer.restype  = POINTER(Renderer)
createSoftwareRenderer.argtypes = [POINTER(Surface)]

getRenderer = lib.SDL_GetRenderer
getRenderer.restype  = POINTER(Renderer)
getRenderer.argtypes = [POINTER(Window)]

getRendererInfo = lib.SDL_GetRendererInfo
getRendererInfo.restype  = c_int
getRendererInfo.argtypes = [POINTER(Renderer), POINTER(RendererInfo)]

getRendererOutputSize = lib.SDL_GetRendererOutputSize
getRendererOutputSize.restype  = c_int
getRendererOutputSize.argtypes = [POINTER(Renderer), POINTER(c_int), POINTER(c_int)]

class Texture(Structure):
    _fields_ = [
        
    ]

createTexture = lib.SDL_CreateTexture
createTexture.restype  = POINTER(Texture)
createTexture.argtypes = [POINTER(Renderer), Uint32, c_int, c_int, c_int]

createTextureFromSurface = lib.SDL_CreateTextureFromSurface
createTextureFromSurface.restype  = POINTER(Texture)
createTextureFromSurface.argtypes = [POINTER(Renderer), POINTER(Surface)]

queryTexture = lib.SDL_QueryTexture
queryTexture.restype  = c_int
queryTexture.argtypes = [POINTER(Texture), POINTER(Uint32), POINTER(c_int), POINTER(c_int), POINTER(c_int)]

setTextureColorMod = lib.SDL_SetTextureColorMod
setTextureColorMod.restype  = c_int
setTextureColorMod.argtypes = [POINTER(Texture), Uint8, Uint8, Uint8]

getTextureColorMod = lib.SDL_GetTextureColorMod
getTextureColorMod.restype  = c_int
getTextureColorMod.argtypes = [POINTER(Texture), POINTER(Uint8), POINTER(Uint8), POINTER(Uint8)]

setTextureAlphaMod = lib.SDL_SetTextureAlphaMod
setTextureAlphaMod.restype  = c_int
setTextureAlphaMod.argtypes = [POINTER(Texture), Uint8]

getTextureAlphaMod = lib.SDL_GetTextureAlphaMod
getTextureAlphaMod.restype  = c_int
getTextureAlphaMod.argtypes = [POINTER(Texture), POINTER(Uint8)]

setTextureBlendMode = lib.SDL_SetTextureBlendMode
setTextureBlendMode.restype  = c_int
setTextureBlendMode.argtypes = [POINTER(Texture), BlendMode]

getTextureBlendMode = lib.SDL_GetTextureBlendMode
getTextureBlendMode.restype  = c_int
getTextureBlendMode.argtypes = [POINTER(Texture), POINTER(BlendMode)]

updateTexture = lib.SDL_UpdateTexture
updateTexture.restype  = c_int
updateTexture.argtypes = [POINTER(Texture), POINTER(Rect), c_void_p, c_int]

lockTexture = lib.SDL_LockTexture
lockTexture.restype  = c_int
lockTexture.argtypes = [POINTER(Texture), POINTER(Rect), POINTER(c_void_p), POINTER(c_int)]

unlockTexture = lib.SDL_UnlockTexture
unlockTexture.restype  = None
unlockTexture.argtypes = [POINTER(Texture)]

renderTargetSupported = lib.SDL_RenderTargetSupported
renderTargetSupported.restype  = bool
renderTargetSupported.argtypes = [POINTER(Renderer)]

setRenderTarget = lib.SDL_SetRenderTarget
setRenderTarget.restype  = c_int
setRenderTarget.argtypes = [POINTER(Renderer), POINTER(Texture)]

getRenderTarget = lib.SDL_GetRenderTarget
getRenderTarget.restype  = POINTER(Texture)
getRenderTarget.argtypes = [POINTER(Renderer)]

renderSetLogicalSize = lib.SDL_RenderSetLogicalSize
renderSetLogicalSize.restype  = c_int
renderSetLogicalSize.argtypes = [POINTER(Renderer), c_int, c_int]

renderGetLogicalSize = lib.SDL_RenderGetLogicalSize
renderGetLogicalSize.restype  = None
renderGetLogicalSize.argtypes = [POINTER(Renderer), POINTER(c_int), POINTER(c_int)]

renderSetViewport = lib.SDL_RenderSetViewport
renderSetViewport.restype  = c_int
renderSetViewport.argtypes = [POINTER(Renderer), POINTER(Rect)]

renderGetViewport = lib.SDL_RenderGetViewport
renderGetViewport.restype  = None
renderGetViewport.argtypes = [POINTER(Renderer), POINTER(Rect)]

renderSetClipRect = lib.SDL_RenderSetClipRect
renderSetClipRect.restype  = c_int
renderSetClipRect.argtypes = [POINTER(Renderer), POINTER(Rect)]

renderGetClipRect = lib.SDL_RenderGetClipRect
renderGetClipRect.restype  = None
renderGetClipRect.argtypes = [POINTER(Renderer), POINTER(Rect)]

renderSetScale = lib.SDL_RenderSetScale
renderSetScale.restype  = c_int
renderSetScale.argtypes = [POINTER(Renderer), c_float, c_float]

renderGetScale = lib.SDL_RenderGetScale
renderGetScale.restype  = None
renderGetScale.argtypes = [POINTER(Renderer), POINTER(c_float), POINTER(c_float)]

setRenderDrawColor = lib.SDL_SetRenderDrawColor
setRenderDrawColor.restype  = c_int
setRenderDrawColor.argtypes = [POINTER(Renderer), Uint8, Uint8, Uint8, Uint8]

getRenderDrawColor = lib.SDL_GetRenderDrawColor
getRenderDrawColor.restype  = c_int
getRenderDrawColor.argtypes = [POINTER(Renderer), POINTER(Uint8), POINTER(Uint8), POINTER(Uint8), POINTER(Uint8)]

setRenderDrawBlendMode = lib.SDL_SetRenderDrawBlendMode
setRenderDrawBlendMode.restype  = c_int
setRenderDrawBlendMode.argtypes = [POINTER(Renderer), BlendMode]

getRenderDrawBlendMode = lib.SDL_GetRenderDrawBlendMode
getRenderDrawBlendMode.restype  = c_int
getRenderDrawBlendMode.argtypes = [POINTER(Renderer), POINTER(BlendMode)]

renderClear = lib.SDL_RenderClear
renderClear.restype  = c_int
renderClear.argtypes = [POINTER(Renderer)]

renderDrawPoint = lib.SDL_RenderDrawPoint
renderDrawPoint.restype  = c_int
renderDrawPoint.argtypes = [POINTER(Renderer), c_int, c_int]

renderDrawPoints = lib.SDL_RenderDrawPoints
renderDrawPoints.restype  = c_int
renderDrawPoints.argtypes = [POINTER(Renderer), POINTER(Point), c_int]

renderDrawLine = lib.SDL_RenderDrawLine
renderDrawLine.restype  = c_int
renderDrawLine.argtypes = [POINTER(Renderer), c_int, c_int, c_int, c_int]

renderDrawLines = lib.SDL_RenderDrawLines
renderDrawLines.restype  = c_int
renderDrawLines.argtypes = [POINTER(Renderer), POINTER(Point), c_int]

renderDrawRect = lib.SDL_RenderDrawRect
renderDrawRect.restype  = c_int
renderDrawRect.argtypes = [POINTER(Renderer), POINTER(Rect)]

renderDrawRects = lib.SDL_RenderDrawRects
renderDrawRects.restype  = c_int
renderDrawRects.argtypes = [POINTER(Renderer), POINTER(Rect), c_int]

renderFillRect = lib.SDL_RenderFillRect
renderFillRect.restype  = c_int
renderFillRect.argtypes = [POINTER(Renderer), POINTER(Rect)]

renderFillRects = lib.SDL_RenderFillRects
renderFillRects.restype  = c_int
renderFillRects.argtypes = [POINTER(Renderer), POINTER(Rect), c_int]

renderCopy = lib.SDL_RenderCopy
renderCopy.restype  = c_int
renderCopy.argtypes = [POINTER(Renderer), POINTER(Texture), POINTER(Rect), POINTER(Rect)]

RendererFlip = c_int

renderCopyEx = lib.SDL_RenderCopyEx
renderCopyEx.restype  = c_int
renderCopyEx.argtypes = [POINTER(Renderer), POINTER(Texture), POINTER(Rect), POINTER(Rect), c_double, POINTER(Point), RendererFlip]

renderReadPixels = lib.SDL_RenderReadPixels
renderReadPixels.restype  = c_int
renderReadPixels.argtypes = [POINTER(Renderer), POINTER(Rect), Uint32, c_void_p, c_int]

renderPresent = lib.SDL_RenderPresent
renderPresent.restype  = None
renderPresent.argtypes = [POINTER(Renderer)]

destroyTexture = lib.SDL_DestroyTexture
destroyTexture.restype  = None
destroyTexture.argtypes = [POINTER(Texture)]

destroyRenderer = lib.SDL_DestroyRenderer
destroyRenderer.restype  = None
destroyRenderer.argtypes = [POINTER(Renderer)]

GL_BindTexture = lib.SDL_GL_BindTexture
GL_BindTexture.restype  = c_int
GL_BindTexture.argtypes = [POINTER(Texture), POINTER(c_float), POINTER(c_float)]

GL_UnbindTexture = lib.SDL_GL_UnbindTexture
GL_UnbindTexture.restype  = c_int
GL_UnbindTexture.argtypes = [POINTER(Texture)]

getTicks = lib.SDL_GetTicks
getTicks.restype  = Uint32
getTicks.argtypes = []

getPerformanceCounter = lib.SDL_GetPerformanceCounter
getPerformanceCounter.restype  = Uint64
getPerformanceCounter.argtypes = []

getPerformanceFrequency = lib.SDL_GetPerformanceFrequency
getPerformanceFrequency.restype  = Uint64
getPerformanceFrequency.argtypes = []

delay = lib.SDL_Delay
delay.restype  = None
delay.argtypes = [Uint32]

TimerID = c_int

TimerCallback = CFUNCTYPE(c_uint, c_uint, c_void_p)

addTimer = lib.SDL_AddTimer
addTimer.restype  = TimerID
addTimer.argtypes = [Uint32, TimerCallback, c_void_p]

removeTimer = lib.SDL_RemoveTimer
removeTimer.restype  = bool
removeTimer.argtypes = [TimerID]

class version(Structure):
    _fields_ = [
        ('major', Uint8),
        ('minor', Uint8),
        ('patch', Uint8)
    ]

getVersion = lib.SDL_GetVersion
getVersion.restype  = None
getVersion.argtypes = [POINTER(version)]

getRevision = lib.SDL_GetRevision
getRevision.restype  = c_char_p
getRevision.argtypes = []

getRevisionNumber = lib.SDL_GetRevisionNumber
getRevisionNumber.restype  = c_int
getRevisionNumber.argtypes = []

init = lib.SDL_Init
init.restype  = c_int
init.argtypes = [Uint32]

initSubSystem = lib.SDL_InitSubSystem
initSubSystem.restype  = c_int
initSubSystem.argtypes = [Uint32]

quitSubSystem = lib.SDL_QuitSubSystem
quitSubSystem.restype  = None
quitSubSystem.argtypes = [Uint32]

wasInit = lib.SDL_WasInit
wasInit.restype  = Uint32
wasInit.argtypes = [Uint32]

quit = lib.SDL_Quit
quit.restype  = None
quit.argtypes = []

# not found:  set(['SDL_AndroidGetInternalStoragePath', 'SDL_GameControllerAddMappingsFromFile', 'SDL_TICKS_PASSED', 'SDL_AndroidGetActivity', 'SDL_MostSignificantBitIndex32', 'SDL_AndroidGetJNIEnv', 'SDL_UpdateYUVTexture', 'SDL_DetachThread', 'SDL_AndroidGetExternalStorageState', 'SDL_GL_GetDrawableSize', 'SDL_GetSystemRAM', 'SDL_GetWindowWMInfo', 'SDL_GetBasePath', 'SDL_REVISION', 'SDL_GetPrefPath', 'SDL_AndroidGetExternalStoragePath'])
